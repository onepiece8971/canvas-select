{"version":3,"file":"index.esm.js","sources":["../src/tools.ts","../src/shape/Shape.ts","../src/shape/Rect.ts","../src/shape/Polygon.ts","../src/shape/Dot.ts","../src/EventBus.ts","../src/shape/Line.ts","../src/shape/Circle.ts","../src/index.ts"],"sourcesContent":["export function createUuid(): string {\r\n  const s: any[] = [];\r\n  const hexDigits = \"0123456789abcdef\";\r\n  for (let i = 0; i < 36; i++) {\r\n    const m = Math.floor(Math.random() * 0x10);\r\n    s[i] = hexDigits.slice(m, m + 1);\r\n  }\r\n  s[14] = \"4\";\r\n  const n = (s[19] & 0x3) | 0x8;\r\n  s[19] = hexDigits.slice(n, n + 1);\r\n  s[8] = s[13] = s[18] = s[23] = \"-\";\r\n  const uuid = s.join(\"\");\r\n  return uuid;\r\n}\r\n\r\n/**\r\n * 判断图形是否符合嵌套关系, 业务需求：只需要判断shape2所有的点是否都在shape1内部即可\r\n * @param shape1 参数1\r\n * @param shape2 参数2\r\n * @reutrn Boolean 符合条件返回true 否则返回false\r\n */\r\n\r\nexport function isNested(shape1: any, shape2: any): boolean {\r\n  if (shape1.type === 1 && shape2.type === 1) {\r\n    // 矩形和矩形的判断逻辑\r\n    const [[x1, y1], [x2, y2]] = shape1.coor;\r\n    const [[x3, y3], [x4, y4]] = shape2.coor;\r\n\r\n    // if (x1 >= x3 && y1 >= y3 && x2 <= x4 && y2 <= y4) {\r\n    //   return true; // shape1 嵌套在 shape2 内部\r\n    // } else\r\n    if (x1 <= x3 && y1 <= y3 && x2 >= x4 && y2 >= y4) {\r\n      return true; // shape2 嵌套在 shape1 内部\r\n    } else {\r\n      return false; // 两个矩形没有嵌套关系\r\n    }\r\n  } else if (shape1.type === 1 && shape2.type === 2) {\r\n    // 矩形和多边形的判断逻辑，确保多边形所有的坐标点都在矩形里面\r\n    const [[x1, y1], [x2, y2]] = shape1.coor;\r\n    const vertices = shape2.coor;\r\n\r\n    for (let i = 0; i < vertices.length; i++) {\r\n      const [x, y] = vertices[i];\r\n      if (x < x1 || x > x2 || y < y1 || y > y2) {\r\n        return false; // 多边形的顶点在矩形外部，不嵌套\r\n      }\r\n    }\r\n\r\n    return true; // 所有顶点都在矩形内部，嵌套关系成立\r\n  } else if (shape1.type === 2 && shape2.type === 1) {\r\n    // 多边形和矩形的判断逻辑，确保矩形的所有坐标点都在多边形里面\r\n    const vertices = shape2.coor; // 矩形的顶点坐标\r\n\r\n    for (let i = 0; i < vertices.length; i++) {\r\n      const [x, y] = vertices[i];\r\n      if (!isPointInPolygon(x, y, shape1.coor)) {\r\n        return false; // 有一个坐标点不在多边形范围内，返回false\r\n      }\r\n    }\r\n\r\n    return true; // 所有坐标点都在多边形内部，返回true\r\n  } else if (shape1.type === 2 && shape2.type === 2) {\r\n    // 多边形和多边形的判断逻辑\r\n    const vertices1 = shape1.coor;\r\n    const vertices2 = shape2.coor;\r\n\r\n    for (let i = 0; i < vertices2.length; i++) {\r\n      const [x, y] = vertices2[i];\r\n      if (!isPointInPolygon(x, y, vertices1)) {\r\n        return false; // 多边形2的顶点不都在多边形1内部，不嵌套\r\n      }\r\n    }\r\n\r\n    return true; // 有坐标点都在多边形内部，返回true\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isPointInPolygon(x: number, y: number, vertices: any) {\r\n  let inside = false;\r\n  const n = vertices.length;\r\n\r\n  for (let i = 0, j = n - 1; i < n; j = i++) {\r\n    const xi = vertices[i][0];\r\n    const yi = vertices[i][1];\r\n    const xj = vertices[j][0];\r\n    const yj = vertices[j][1];\r\n\r\n    if (yi > y !== yj > y && x < ((xj - xi) * (y - yi)) / (yj - yi) + xi) {\r\n      inside = !inside;\r\n    }\r\n  }\r\n\r\n  return inside;\r\n}\r\n","import { createUuid } from \"../tools\"\r\n\r\ninterface ShapeProp {\r\n    type: number\r\n    [key: string]: any\r\n}\r\nexport default class Shape {\r\n    /** 标签 */\r\n    public label: string = ''\r\n    /** 是否隐藏标签 */\r\n    public hideLabel: boolean = false\r\n    /** 坐标 */\r\n    public coor: any[] = []\r\n    /** 边线颜色 */\r\n    public strokeStyle: string = '#000'\r\n    /** 填充颜色 */\r\n    public fillStyle: string = '#fff'\r\n    /** 边线宽度 */\r\n    public lineWidth: number = 1\r\n    /** 标签填充颜色 */\r\n    public labelFillStyle: string = '#000'\r\n    /** 标签文字颜色 */\r\n    public textFillStyle: string = '#fff'\r\n    /** 标签文字字体 */\r\n    public labelFont: string = '14px Microsoft YaHei'\r\n    /** 1 矩形，2 多边形，3 点，4 折线，5 圆 */\r\n    public type: number = 1 // 形状\r\n    /** 当前是否处于活动状态 */\r\n    public active: boolean = false\r\n    /** 当前是否处于创建状态 */\r\n    public creating: boolean = false\r\n    /** 当前是否处于拖拽状态 */\r\n    public dragging: boolean = false\r\n    /** 索引 */\r\n    public index: number\r\n    /** 唯一标识 */\r\n    public uuid: string = createUuid()\r\n    /** 向上展示label */\r\n    public labelUp: boolean = false\r\n    constructor(item: ShapeProp, index: number) {\r\n        this.index = index\r\n        Object.assign(this, item)\r\n    }\r\n}\r\n","import Shape from './Shape';\r\n\r\nexport default class Rect extends Shape {\r\n  public type = 1\r\n  constructor(item: any, index: number) {\r\n    super(item, index)\r\n  }\r\n  get ctrlsData() {\r\n    const [[x0, y0], [x1, y1]] = this.coor;\r\n    return [\r\n      [x0, y0],\r\n      [x0 + (x1 - x0) / 2, y0],\r\n      [x1, y0],\r\n      [x1, y0 + (y1 - y0) / 2],\r\n      [x1, y1],\r\n      [x0 + (x1 - x0) / 2, y1],\r\n      [x0, y1],\r\n      [x0, y0 + (y1 - y0) / 2],\r\n    ];\r\n  }\r\n}\r\n","import Shape from './Shape';\r\n\r\nexport default class Polygon extends Shape {\r\n  public type = 2\r\n  constructor(item: any, index: number) {\r\n    super(item, index)\r\n  }\r\n  get ctrlsData() {\r\n    return this.coor.length > 2 ? this.coor : [];\r\n  }\r\n}\r\n","import Shape from './Shape';\r\n\r\nexport default class Dot extends Shape {\r\n    public type = 3\r\n    constructor(item: any, index: number) {\r\n        super(item, index)\r\n    }\r\n}\r\n","export default class EventBus {\r\n    private _eventTree: Record<string, any> = {}\r\n    /**\r\n   * 注册事件\r\n   * @param eventName 事件名称\r\n   * @param cb 回调方法\r\n   */\r\n    on(eventName: string, cb: Function) {\r\n        const fns = this._eventTree[eventName];\r\n        if (Array.isArray(fns)) {\r\n            fns.push(cb);\r\n        } else {\r\n            this._eventTree[eventName] = [cb];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 触发事件\r\n     * @param eventName 事件名称\r\n     * @param payload 传递参数\r\n     */\r\n    emit(eventName: string, ...payload: any) {\r\n        const fns = this._eventTree[eventName];\r\n        if (Array.isArray(fns)) {\r\n            fns.forEach((fn) => fn(...payload));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 注销事件\r\n     * @param eventName 事件名称\r\n     * @param cb 传递参数\r\n     */\r\n    off(eventName: string, cb: Function) {\r\n        const fns = this._eventTree[eventName];\r\n        const index = fns.find((fn: Function) => fn === cb);\r\n        if (Array.isArray(fns) && index) {\r\n            fns.splice(index, 1);\r\n        }\r\n    }\r\n}\r\n","import Shape from './Shape';\r\n\r\nexport default class Line extends Shape {\r\n  public type = 4\r\n  constructor(item: any, index: number) {\r\n    super(item, index)\r\n  }\r\n  get ctrlsData() {\r\n    return this.coor.length > 1 ? this.coor : [];\r\n  }\r\n}\r\n","import Shape from './Shape';\r\n\r\nexport default class Circle extends Shape {\r\n    public type = 5\r\n    public radius = 0\r\n    constructor(item: any, index: number) {\r\n        super(item, index)\r\n        this.radius = item.radius || this.radius\r\n    }\r\n    get ctrlsData() {\r\n        const [x, y] = this.coor\r\n        return [\r\n            [x, y - this.radius],\r\n            [x + this.radius, y],\r\n            [x, y + this.radius],\r\n            [x - this.radius, y]\r\n        ]\r\n    }\r\n}\r\n","import Rect from './shape/Rect';\r\nimport Polygon from './shape/Polygon';\r\nimport Dot from './shape/Dot';\r\nimport EventBus from './EventBus';\r\nimport Line from './shape/Line';\r\nimport Circle from './shape/Circle';\r\nimport { isNested } from \"./tools\";\r\n\r\nexport type Point = [number, number];\r\nexport type AllShape = Rect | Polygon | Dot | Line | Circle;\r\nenum Shape {\r\n    None,\r\n    Rect,\r\n    Polygon,\r\n    Dot,\r\n    Line,\r\n    Circle\r\n}\r\n\r\nexport default class CanvasSelect extends EventBus {\r\n    /** 只读模式，画布不允许任何交互 */\r\n    lock: boolean = false;\r\n    /** 只读模式，仅支持查看 */\r\n    readonly: boolean = false;\r\n    /** 最小矩形宽度 */\r\n    MIN_WIDTH = 10;\r\n    /** 最小矩形高度 */\r\n    MIN_HEIGHT = 10;\r\n    /** 最小圆形半径 */\r\n    MIN_RADIUS = 5;\r\n    /** 边线颜色 */\r\n    strokeStyle = '#0f0';\r\n    /** 填充颜色 */\r\n    fillStyle = 'rgba(0, 0, 255,0.1)';\r\n    /** 边线宽度 */\r\n    lineWidth = 1;\r\n    /** 当前选中的标注边线颜色 */\r\n    activeStrokeStyle = '#f00';\r\n    /** 当前选中的标注填充颜色 */\r\n    activeFillStyle = 'rgba(255, 0, 0,0.1)';\r\n    /** 控制点边线颜色 */\r\n    ctrlStrokeStyle = '#000';\r\n    /** 控制点填充颜色 */\r\n    ctrlFillStyle = '#fff';\r\n    /** 控制点半径 */\r\n    ctrlRadius = 3;\r\n    /** 是否隐藏标签 */\r\n    hideLabel = false;\r\n    /** 标签背景填充颜色 */\r\n    labelFillStyle = '#fff';\r\n    /** 标签字体 */\r\n    labelFont = '10px sans-serif';\r\n    /** 标签文字颜色 */\r\n    textFillStyle = '#000';\r\n    /** 标签字符最大长度，超出使用省略号 */\r\n    labelMaxLen = 10;\r\n    /** 画布宽度 */\r\n    WIDTH = 0;\r\n    /** 画布高度 */\r\n    HEIGHT = 0;\r\n\r\n    canvas: HTMLCanvasElement | any;\r\n\r\n    ctx: CanvasRenderingContext2D | any;\r\n    /** 所有标注数据 */\r\n    dataset: AllShape[] = [];\r\n\r\n    offScreen: HTMLCanvasElement | any;\r\n\r\n    offScreenCtx: CanvasRenderingContext2D | any;\r\n    /** 记录锚点距离 */\r\n    remmber: number[][] = [];\r\n    /** 记录鼠标位置 */\r\n    mouse: Point = [0, 0];\r\n    /** 记录背景图鼠标位移 */\r\n    remmberOrigin: number[] = [0, 0];\r\n    /** 0 不创建，1 矩形，2 多边形，3 点，4 折线，5 圆 */\r\n    createType: Shape = Shape.None; //\r\n    /** 控制点索引 */\r\n    ctrlIndex = -1;\r\n    /** 背景图片 */\r\n    image: HTMLImageElement = new Image();\r\n    /** 图片原始宽度 */\r\n    IMAGE_ORIGIN_WIDTH: number = 0;\r\n    /** 图片缩放宽度 */\r\n    IMAGE_WIDTH = 0;\r\n    /** 图片原始高度 */\r\n    IMAGE_ORIGIN_HEIGHT = 0;\r\n    /** 图片缩放高度 */\r\n    IMAGE_HEIGHT = 0;\r\n    /** 原点x */\r\n    originX = 0;\r\n    /** 原点y */\r\n    originY = 0;\r\n    /** 缩放步长 */\r\n    scaleStep = 0;\r\n    /** 滚动缩放 */\r\n    scrollZoom = true;\r\n\r\n    private timer: any;\r\n    /** 最小touch双击时间 */\r\n    dblTouch = 300;\r\n    /** 记录touch双击开始时间 */\r\n    dblTouchStore = 0; //\r\n    /** 这个选项可以帮助浏览器进行内部优化 */\r\n    alpha = true;\r\n    /** 专注模式 */\r\n    focusMode = false;\r\n    /** 记录当前事件 */\r\n    public evt: MouseEvent | TouchEvent | KeyboardEvent | null = null;\r\n    /** 触控缩放时记录上一次两点距离 */\r\n    scaleTouchStore = 0;\r\n    /** 当前是否为双指触控 */\r\n    isTouch2 = false;\r\n    isMobile = navigator.userAgent.includes('Mobile');\r\n    /** 向上展示label */\r\n    labelUp = false;\r\n    private ctrlKey = false;\r\n    /**\r\n     * @param el Valid CSS selector string, or DOM\r\n     * @param src image src\r\n     */\r\n    constructor(el: HTMLCanvasElement | string, src?: string) {\r\n        super();\r\n        this.handleLoad = this.handleLoad.bind(this);\r\n        this.handleContextmenu = this.handleContextmenu.bind(this);\r\n        this.handleMousewheel = this.handleMousewheel.bind(this);\r\n        this.handleMouseDown = this.handleMouseDown.bind(this);\r\n        this.handleMouseMove = this.handleMouseMove.bind(this);\r\n        this.handleMouseUp = this.handleMouseUp.bind(this);\r\n        this.handleDblclick = this.handleDblclick.bind(this);\r\n        this.handleKeyup = this.handleKeyup.bind(this);\r\n        this.handleKeydown = this.handleKeydown.bind(this);\r\n        const container = typeof el === 'string' ? document.querySelector(el) : el;\r\n        if (container instanceof HTMLCanvasElement) {\r\n            this.canvas = container;\r\n            this.offScreen = document.createElement('canvas');\r\n            this.initSetting();\r\n            this.initEvents();\r\n            src && this.setImage(src);\r\n        } else {\r\n            console.warn('HTMLCanvasElement is required!');\r\n        }\r\n    }\r\n\r\n    /** 当前当前选中的标注 */\r\n    get activeShape() {\r\n        return this.dataset.find(x => x.active) || {} as any;\r\n    }\r\n\r\n    /** 当前缩放比例 */\r\n    get scale() {\r\n        if (this.IMAGE_ORIGIN_WIDTH && this.IMAGE_WIDTH) {\r\n            return this.IMAGE_WIDTH / this.IMAGE_ORIGIN_WIDTH;\r\n        }\r\n        return 1;\r\n    }\r\n\r\n    /** 图片最小边尺寸 */\r\n    get imageMin() {\r\n        return Math.min(this.IMAGE_WIDTH, this.IMAGE_HEIGHT);\r\n    }\r\n\r\n    /** 图片原始最大边尺寸 */\r\n    get imageOriginMax() {\r\n        return Math.max(this.IMAGE_ORIGIN_WIDTH, this.IMAGE_ORIGIN_HEIGHT);\r\n    }\r\n\r\n    /** 合成事件 */\r\n    private mergeEvent(e: TouchEvent | MouseEvent) {\r\n        let mouseX = 0;\r\n        let mouseY = 0;\r\n        let mouseCX = 0;\r\n        let mouseCY = 0;\r\n        if (this.isMobile) {\r\n            const { clientX, clientY } = (e as TouchEvent).touches[0];\r\n            const target = e.target as HTMLCanvasElement;\r\n            const { left, top } = target.getBoundingClientRect();\r\n            mouseX = Math.round(clientX - left);\r\n            mouseY = Math.round(clientY - top);\r\n            if ((e as TouchEvent).touches.length === 2) {\r\n                const { clientX: clientX1 = 0, clientY: clientY1 = 0 } = (e as TouchEvent).touches[1] || {};\r\n                mouseCX = Math.round(Math.abs((clientX1 - clientX) / 2 + clientX) - left);\r\n                mouseCY = Math.round(Math.abs((clientY1 - clientY) / 2 + clientY) - top);\r\n            }\r\n        } else {\r\n            mouseX = (e as MouseEvent).offsetX;\r\n            mouseY = (e as MouseEvent).offsetY;\r\n        }\r\n        return { ...e, mouseX, mouseY, mouseCX, mouseCY };\r\n    }\r\n\r\n    private handleLoad() {\r\n        this.emit('load', this.image.src);\r\n        this.IMAGE_ORIGIN_WIDTH = this.IMAGE_WIDTH = this.image.width;\r\n        this.IMAGE_ORIGIN_HEIGHT = this.IMAGE_HEIGHT = this.image.height;\r\n        this.fitZoom();\r\n    }\r\n\r\n    private handleContextmenu(e: MouseEvent) {\r\n        e.preventDefault();\r\n        this.evt = e;\r\n        if (this.lock) return;\r\n    }\r\n\r\n    private handleMousewheel(e: WheelEvent) {\r\n        e.stopPropagation();\r\n        this.evt = e;\r\n        if (this.lock || !this.scrollZoom) return;\r\n        const { mouseX, mouseY } = this.mergeEvent(e);\r\n        this.mouse = [mouseX, mouseY];\r\n        this.setScale(e.deltaY < 0, true);\r\n    }\r\n\r\n    private handleMouseDown(e: MouseEvent | TouchEvent) {\r\n        e.stopPropagation();\r\n        this.evt = e;\r\n        if (this.lock) return;\r\n        const { mouseX, mouseY, mouseCX, mouseCY } = this.mergeEvent(e);\r\n        const offsetX = Math.round(mouseX / this.scale);\r\n        const offsetY = Math.round(mouseY / this.scale);\r\n        this.mouse = this.isMobile && (e as TouchEvent).touches.length === 2 ? [mouseCX, mouseCY] : [mouseX, mouseY];\r\n        this.remmberOrigin = [mouseX - this.originX, mouseY - this.originY];\r\n        if ((!this.isMobile && (e as MouseEvent).buttons === 1) || (this.isMobile && (e as TouchEvent).touches.length === 1)) { // 鼠标左键\r\n            const ctrls = this.activeShape.ctrlsData || [];\r\n            this.ctrlIndex = ctrls.findIndex((coor: Point) => this.isPointInCircle(this.mouse, coor, this.ctrlRadius));\r\n            if (this.ctrlIndex > -1 && !this.readonly) { // 点击到控制点\r\n                const [x0, y0] = ctrls[this.ctrlIndex];\r\n                if (this.activeShape.type === Shape.Polygon && this.activeShape.coor.length > 2 && this.ctrlIndex === 0) {\r\n                    this.handleDblclick(e)\r\n                }\r\n                this.remmber = [[offsetX - x0, offsetY - y0]];\r\n            } else if (this.isInBackground(e)) {\r\n                if (this.activeShape.creating && !this.readonly) { // 创建中\r\n                    if ([Shape.Polygon, Shape.Line].includes(this.activeShape.type)) {\r\n                        const [x, y] = this.activeShape.coor[this.activeShape.coor.length - 1];\r\n                        if (x !== offsetX && y !== offsetY) {\r\n                            const nx = Math.round(offsetX - this.originX / this.scale);\r\n                            const ny = Math.round(offsetY - this.originY / this.scale);\r\n                            this.activeShape.coor.push([nx, ny]);\r\n                        }\r\n                    }\r\n                } else if (this.createType !== Shape.None && !this.readonly && !this.ctrlKey) { // 开始创建\r\n                    let newShape: any;\r\n                    const nx = Math.round(offsetX - this.originX / this.scale);\r\n                    const ny = Math.round(offsetY - this.originY / this.scale);\r\n                    const curPoint: Point = [nx, ny];\r\n                    switch (this.createType) {\r\n                        case Shape.Rect:\r\n                            newShape = new Rect({ coor: [curPoint, curPoint] }, this.dataset.length);\r\n                            newShape.creating = true;\r\n                            break;\r\n                        case Shape.Polygon:\r\n                            newShape = new Polygon({ coor: [curPoint] }, this.dataset.length);\r\n                            newShape.creating = true;\r\n                            break;\r\n                        case Shape.Dot:\r\n                            newShape = new Dot({ coor: curPoint }, this.dataset.length);\r\n                            this.emit('add', newShape);\r\n                            break;\r\n                        case Shape.Line:\r\n                            newShape = new Line({ coor: [curPoint] }, this.dataset.length);\r\n                            newShape.creating = true;\r\n                            break;\r\n                        case Shape.Circle:\r\n                            newShape = new Circle({ coor: curPoint }, this.dataset.length);\r\n                            newShape.creating = true;\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                    this.dataset.forEach((sp) => { sp.active = false; });\r\n                    newShape.active = true;\r\n                    this.dataset.push(newShape);\r\n                } else {\r\n                    // 是否点击到形状\r\n                    const [hitShapeIndex, hitShape] = this.hitOnShape(this.mouse);\r\n                    if (hitShapeIndex > -1) {\r\n                        hitShape.dragging = true;\r\n                        this.dataset.forEach((item, i) => item.active = i === hitShapeIndex);\r\n                        this.dataset.splice(hitShapeIndex, 1);\r\n                        this.dataset.push(hitShape);\r\n                        if (!this.readonly) {\r\n                            this.remmber = [];\r\n                            if ([Shape.Dot, Shape.Circle].includes(hitShape.type)) {\r\n                                const [x, y] = hitShape.coor;\r\n                                this.remmber = [[offsetX - x, offsetY - y]];\r\n                            } else {\r\n                                hitShape.coor.forEach((pt: any) => {\r\n                                    this.remmber.push([offsetX - pt[0], offsetY - pt[1]]);\r\n                                });\r\n                            }\r\n                        }\r\n                        this.emit('select', hitShape);\r\n                    } else {\r\n                        this.activeShape.active = false;\r\n                        this.dataset.sort((a, b) => a.index - b.index);\r\n                        this.emit('select', null);\r\n                    }\r\n                }\r\n                this.update();\r\n            }\r\n        }\r\n    }\r\n\r\n    private handleMouseMove(e: MouseEvent | TouchEvent) {\r\n        e.stopPropagation();\r\n        this.evt = e;\r\n        if (this.lock) return;\r\n        const { mouseX, mouseY, mouseCX, mouseCY } = this.mergeEvent(e);\r\n        const offsetX = Math.round(mouseX / this.scale);\r\n        const offsetY = Math.round(mouseY / this.scale);\r\n        this.mouse = this.isMobile && (e as TouchEvent).touches.length === 2 ? [mouseCX, mouseCY] : [mouseX, mouseY];\r\n        if (((!this.isMobile && (e as MouseEvent).buttons === 1) || (this.isMobile && (e as TouchEvent).touches.length === 1)) && this.activeShape.type) {\r\n            if (this.ctrlIndex > -1 && this.remmber.length && (this.isInBackground(e) || this.activeShape.type === Shape.Circle)) {\r\n                const [[x, y]] = this.remmber;\r\n                // resize矩形\r\n                if (this.activeShape.type === Shape.Rect) {\r\n                    const [[x0, y0], [x1, y1]] = this.activeShape.coor;\r\n                    let coor: Point[] = [];\r\n                    switch (this.ctrlIndex) {\r\n                        case 0:\r\n                            coor = [[offsetX - x, offsetY - y], [x1, y1]];\r\n                            break;\r\n                        case 1:\r\n                            coor = [[x0, offsetY - y], [x1, y1]];\r\n                            break;\r\n                        case 2:\r\n                            coor = [[x0, offsetY - y], [offsetX - x, y1]];\r\n                            break;\r\n                        case 3:\r\n                            coor = [[x0, y0], [offsetX - x, y1]];\r\n                            break;\r\n                        case 4:\r\n                            coor = [[x0, y0], [offsetX - x, offsetY - y]];\r\n                            break;\r\n                        case 5:\r\n                            coor = [[x0, y0], [x1, offsetY - y]];\r\n                            break;\r\n                        case 6:\r\n                            coor = [[offsetX - x, y0], [x1, offsetY - y]];\r\n                            break;\r\n                        case 7:\r\n                            coor = [[offsetX - x, y0], [x1, y1]];\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                    let [[a0, b0], [a1, b1]] = coor;\r\n                    if (\r\n                        a0 < 0 ||\r\n                        a1 < 0 ||\r\n                        b0 < 0 ||\r\n                        b1 < 0 ||\r\n                        a1 > this.IMAGE_ORIGIN_WIDTH ||\r\n                        b1 > this.IMAGE_ORIGIN_HEIGHT\r\n                    ) {\r\n                        // 偶然触发 超出边界处理\r\n                        a0 < 0 && (a0 = 0);\r\n                        a1 < 0 && (a1 = 0);\r\n                        b0 < 0 && (b0 = 0);\r\n                        b1 < 0 && (b1 = 0);\r\n                        if (a1 > this.IMAGE_ORIGIN_WIDTH) {\r\n                            a1 = this.IMAGE_ORIGIN_WIDTH;\r\n                        }\r\n                        if (b1 > this.IMAGE_ORIGIN_HEIGHT) {\r\n                            b1 = this.IMAGE_ORIGIN_HEIGHT;\r\n                        }\r\n                    }\r\n\r\n                    if (a1 - a0 >= this.MIN_WIDTH && b1 - b0 >= this.MIN_HEIGHT) {\r\n                        this.activeShape.coor = [[a0, b0], [a1, b1]];\r\n                    } else {\r\n                        this.emit('warn', `Width cannot be less than ${this.MIN_WIDTH},Height cannot be less than${this.MIN_HEIGHT}。`);\r\n                    }\r\n                } else if ([Shape.Polygon, Shape.Line].includes(this.activeShape.type)) {\r\n                    const nx = Math.round(offsetX - this.originX / this.scale);\r\n                    const ny = Math.round(offsetY - this.originY / this.scale);\r\n                    const newPoint = [nx, ny];\r\n                    this.activeShape.coor.splice(this.ctrlIndex, 1, newPoint);\r\n                } else if (this.activeShape.type === Shape.Circle) {\r\n                    const nx = Math.round(offsetX - this.originX / this.scale);\r\n                    const newRadius = nx - this.activeShape.coor[0];\r\n                    if (newRadius >= this.MIN_RADIUS) this.activeShape.radius = newRadius;\r\n                }\r\n            } else if (this.activeShape.dragging && !this.readonly) { // 拖拽\r\n                let coor = [];\r\n                let noLimit = true;\r\n                const w = this.IMAGE_ORIGIN_WIDTH || this.WIDTH;\r\n                const h = this.IMAGE_ORIGIN_HEIGHT || this.HEIGHT;\r\n                if ([Shape.Dot, Shape.Circle].includes(this.activeShape.type)) {\r\n                    const [t1, t2] = this.remmber[0];\r\n                    const x = offsetX - t1;\r\n                    const y = offsetY - t2;\r\n                    if (x < 0 || x > w || y < 0 || y > h) noLimit = false;\r\n                    coor = [x, y];\r\n                } else {\r\n                    for (let i = 0; i < this.activeShape.coor.length; i++) {\r\n                        const tar = this.remmber[i];\r\n                        const x = offsetX - tar[0];\r\n                        const y = offsetY - tar[1];\r\n                        if (x < 0 || x > w || y < 0 || y > h) noLimit = false;\r\n                        coor.push([x, y]);\r\n                    }\r\n                }\r\n                if (noLimit) this.activeShape.coor = coor;\r\n            } else if (this.activeShape.creating && this.isInBackground(e)) {\r\n                const x = Math.round(offsetX - this.originX / this.scale);\r\n                const y = Math.round(offsetY - this.originY / this.scale);\r\n                // 创建矩形\r\n                if (this.activeShape.type === Shape.Rect) {\r\n                    this.activeShape.coor.splice(1, 1, [x, y]);\r\n                } else if (this.activeShape.type === Shape.Circle) {\r\n                    const [x0, y0] = this.activeShape.coor;\r\n                    const r = Math.sqrt((x0 - x) ** 2 + (y0 - y) ** 2);\r\n                    this.activeShape.radius = r;\r\n                }\r\n            }\r\n            this.update();\r\n        } else if ([Shape.Polygon, Shape.Line].includes(this.activeShape.type) && this.activeShape.creating) {\r\n            // 多边形添加点\r\n            this.update();\r\n        } else if ((!this.isMobile && (e as MouseEvent).buttons === 2 && (e as MouseEvent).which === 3) || (this.isMobile && (e as TouchEvent).touches.length === 1 && !this.isTouch2)) {\r\n            // 拖动背景\r\n            this.originX = Math.round(mouseX - this.remmberOrigin[0]);\r\n            this.originY = Math.round(mouseY - this.remmberOrigin[1]);\r\n            this.update();\r\n        } else if (this.isMobile && (e as TouchEvent).touches.length === 2) {\r\n            this.isTouch2 = true;\r\n            const touch0 = (e as TouchEvent).touches[0];\r\n            const touch1 = (e as TouchEvent).touches[1];\r\n            const cur = this.scaleTouchStore;\r\n            this.scaleTouchStore = Math.abs((touch1.clientX - touch0.clientX) * (touch1.clientY - touch0.clientY));\r\n            this.setScale(this.scaleTouchStore > cur, true);\r\n        }\r\n    }\r\n\r\n    private handleMouseUp(e: MouseEvent | TouchEvent) {\r\n        e.stopPropagation();\r\n        this.evt = e;\r\n        if (this.lock) return;\r\n        if (this.isMobile) {\r\n            if ((e as TouchEvent).touches.length === 0) {\r\n                this.isTouch2 = false;\r\n            }\r\n            if ((Date.now() - this.dblTouchStore) < this.dblTouch) {\r\n                this.handleDblclick(e);\r\n                return;\r\n            }\r\n            this.dblTouchStore = Date.now();\r\n        }\r\n        this.remmber = [];\r\n        if (this.activeShape.type !== Shape.None && !this.ctrlKey) {\r\n            this.activeShape.dragging = false;\r\n            if (this.activeShape.creating) {\r\n                if (this.activeShape.type === Shape.Rect) {\r\n                    const [[x0, y0], [x1, y1]] = this.activeShape.coor;\r\n                    if (Math.abs(x0 - x1) < this.MIN_WIDTH || Math.abs(y0 - y1) < this.MIN_HEIGHT) {\r\n                        this.dataset.pop();\r\n                        this.emit('warn', `Width cannot be less than ${this.MIN_WIDTH},Height cannot be less than ${this.MIN_HEIGHT}`);\r\n                    } else {\r\n                        this.activeShape.coor = [[Math.min(x0, x1), Math.min(y0, y1)], [Math.max(x0, x1), Math.max(y0, y1)]];\r\n                        this.activeShape.creating = false;\r\n                        this.emit('add', this.activeShape);\r\n                    }\r\n                } else if (this.activeShape.type === Shape.Circle) {\r\n                    if (this.activeShape.radius < this.MIN_RADIUS) {\r\n                        this.dataset.pop();\r\n                        this.emit('warn', `Radius cannot be less than ${this.MIN_WIDTH}`);\r\n                    } else {\r\n                        this.activeShape.creating = false;\r\n                        this.emit('add', this.activeShape);\r\n                    }\r\n                }\r\n                this.update();\r\n            }\r\n        }\r\n    }\r\n\r\n    private handleDblclick(e: MouseEvent | TouchEvent) {\r\n        e.stopPropagation();\r\n        this.evt = e;\r\n        if (this.lock) return;\r\n        if ([Shape.Polygon, Shape.Line].includes(this.activeShape.type)) {\r\n            const canPolygon = this.activeShape.type === Shape.Polygon && this.activeShape.coor.length > 2\r\n            const canLine = this.activeShape.type === Shape.Line && this.activeShape.coor.length > 1\r\n            if (canPolygon || canLine) {\r\n                this.emit('add', this.activeShape);\r\n                this.activeShape.creating = false;\r\n                this.update();\r\n            }\r\n        }\r\n    }\r\n    private handleKeydown(e: KeyboardEvent) {\r\n        if (e.key === 'Control') {\r\n            this.ctrlKey = true;\r\n        }\r\n    }\r\n\r\n    private handleKeyup(e: KeyboardEvent) {\r\n        if (e.key === 'Control') {\r\n            this.ctrlKey = false;\r\n        }\r\n        this.evt = e;\r\n        if (this.lock || this.readonly) return;\r\n        if (this.activeShape.type) {\r\n            if ([Shape.Polygon, Shape.Line].includes(this.activeShape.type) && e.key === 'Escape') {\r\n                if (this.activeShape.coor.length > 1 && this.activeShape.creating) {\r\n                    this.activeShape.coor.pop();\r\n                } else {\r\n                    this.deleteByIndex(this.activeShape.index);\r\n                }\r\n                this.update();\r\n            } else if (e.key === 'Delete') {\r\n                this.deleteByIndex(this.activeShape.index);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** 初始化配置 */\r\n    initSetting() {\r\n        const dpr = window.devicePixelRatio || 1;\r\n        this.canvas.style.userSelect = 'none';\r\n        this.ctx = this.ctx || this.canvas.getContext('2d', { alpha: this.alpha });\r\n        this.WIDTH = Math.round(this.canvas.clientWidth);\r\n        this.HEIGHT = Math.round(this.canvas.clientHeight);\r\n        this.canvas.width = this.WIDTH * dpr;\r\n        this.canvas.height = this.HEIGHT * dpr;\r\n        this.canvas.style.width = this.WIDTH + 'px';\r\n        this.canvas.style.height = this.HEIGHT + 'px';\r\n        this.offScreen.width = this.WIDTH;\r\n        this.offScreen.height = this.HEIGHT;\r\n        this.offScreenCtx = this.offScreenCtx || this.offScreen.getContext('2d', { willReadFrequently: true });\r\n        this.ctx.scale(dpr, dpr);\r\n    }\r\n\r\n    /** 初始化事件 */\r\n    initEvents() {\r\n        this.image.addEventListener('load', this.handleLoad);\r\n        this.canvas.addEventListener('touchstart', this.handleMouseDown);\r\n        this.canvas.addEventListener('touchmove', this.handleMouseMove);\r\n        this.canvas.addEventListener('touchend', this.handleMouseUp);\r\n        this.canvas.addEventListener('contextmenu', this.handleContextmenu);\r\n        this.canvas.addEventListener('mousewheel', this.handleMousewheel);\r\n        this.canvas.addEventListener('mousedown', this.handleMouseDown);\r\n        this.canvas.addEventListener('mousemove', this.handleMouseMove);\r\n        this.canvas.addEventListener('mouseup', this.handleMouseUp);\r\n        this.canvas.addEventListener('dblclick', this.handleDblclick);\r\n        document.body.addEventListener('keydown', this.handleKeydown, true);\r\n        document.body.addEventListener('keyup', this.handleKeyup, true);\r\n    }\r\n\r\n    /**\r\n     * 添加/切换图片\r\n     * @param url 图片链接\r\n     */\r\n    setImage(url: string) {\r\n        this.image.src = url;\r\n    }\r\n\r\n    /**\r\n     * 设置数据\r\n     * @param data Array\r\n     */\r\n    setData(data: AllShape[]) {\r\n        setTimeout(() => {\r\n            const initdata: AllShape[] = [];\r\n            data.forEach((item, index) => {\r\n                if (Object.prototype.toString.call(item).includes('Object')) {\r\n                    let shape: AllShape;\r\n                    switch (item.type) {\r\n                        case Shape.Rect:\r\n                            shape = new Rect(item, index);\r\n                            break;\r\n                        case Shape.Polygon:\r\n                            shape = new Polygon(item, index);\r\n                            break;\r\n                        case Shape.Dot:\r\n                            shape = new Dot(item, index);\r\n                            break;\r\n                        case Shape.Line:\r\n                            shape = new Line(item, index);\r\n                            break;\r\n                        case Shape.Circle:\r\n                            shape = new Circle(item, index);\r\n                            break;\r\n                        default:\r\n                            shape = new Rect(item, index);\r\n                            console.warn('Invalid shape', item);\r\n                            break;\r\n                    }\r\n                    [Shape.Rect, Shape.Polygon, Shape.Dot, Shape.Line, Shape.Circle].includes(item.type) && initdata.push(shape);\r\n                } else {\r\n                    console.warn('Shape must be an enumerable Object.', item);\r\n                }\r\n            });\r\n            this.dataset = initdata;\r\n            this.update();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 判断是否在标注实例上\r\n     * @param mousePoint 点击位置\r\n     * @returns\r\n     */\r\n    hitOnShape(mousePoint: Point): [number, AllShape] {\r\n        let hitShapeIndex = -1;\r\n        let hitShape: AllShape | any;\r\n        for (let i = this.dataset.length - 1; i > -1; i--) {\r\n            const shape = this.dataset[i];\r\n            if (\r\n                (shape.type === Shape.Dot && this.isPointInCircle(mousePoint, shape.coor as Point, this.ctrlRadius)) ||\r\n                (shape.type === Shape.Circle && this.isPointInCircle(mousePoint, shape.coor as Point, (shape as Circle).radius * this.scale)) ||\r\n                (shape.type === Shape.Rect && this.isPointInRect(mousePoint, (shape as Rect).coor)) ||\r\n                (shape.type === Shape.Polygon && this.isPointInPolygon(mousePoint, (shape as Polygon).coor)) ||\r\n                (shape.type === Shape.Line && this.isPointInLine(mousePoint, (shape as Line).coor))\r\n            ) {\r\n                if (this.focusMode && !shape.active) continue;\r\n                hitShapeIndex = i;\r\n                hitShape = shape;\r\n                break;\r\n            }\r\n        }\r\n        return [hitShapeIndex, hitShape];\r\n    }\r\n\r\n    /**\r\n     * 判断鼠标是否在背景图内部\r\n     * @param e MouseEvent\r\n     * @returns 布尔值\r\n     */\r\n    isInBackground(e: MouseEvent | TouchEvent): boolean {\r\n        const { mouseX, mouseY } = this.mergeEvent(e);\r\n        return mouseX >= this.originX &&\r\n            mouseY >= this.originY &&\r\n            mouseX <= this.originX + this.IMAGE_ORIGIN_WIDTH * this.scale &&\r\n            mouseY <= this.originY + this.IMAGE_ORIGIN_HEIGHT * this.scale;\r\n    }\r\n\r\n    /**\r\n     * 判断是否在矩形内\r\n     * @param point 坐标\r\n     * @param coor 区域坐标\r\n     * @returns 布尔值\r\n     */\r\n    isPointInRect(point: Point, coor: Point[]): boolean {\r\n        const [x, y] = point;\r\n        const [[x0, y0], [x1, y1]] = coor.map((a) => a.map((b) => b * this.scale));\r\n        return x0 + this.originX <= x &&\r\n            x <= x1 + this.originX &&\r\n            y0 + this.originY <= y &&\r\n            y <= y1 + this.originY;\r\n    }\r\n\r\n    /**\r\n     * 判断是否在多边形内\r\n     * @param point 坐标\r\n     * @param coor 区域坐标\r\n     * @returns 布尔值\r\n     */\r\n    isPointInPolygon(point: Point, coor: Point[]): boolean {\r\n        this.offScreenCtx.save();\r\n        this.offScreenCtx.clearRect(0, 0, this.WIDTH, this.HEIGHT);\r\n        this.offScreenCtx.translate(this.originX, this.originY);\r\n        this.offScreenCtx.beginPath();\r\n        coor.forEach((pt, i) => {\r\n            const [x, y] = pt.map((a) => Math.round(a * this.scale));\r\n            if (i === 0) {\r\n                this.offScreenCtx.moveTo(x, y);\r\n            } else {\r\n                this.offScreenCtx.lineTo(x, y);\r\n            }\r\n        });\r\n        this.offScreenCtx.closePath();\r\n        this.offScreenCtx.fill();\r\n        const areaData = this.offScreenCtx.getImageData(0, 0, this.WIDTH, this.HEIGHT);\r\n        const index = (point[1] - 1) * this.WIDTH * 4 + point[0] * 4;\r\n        this.offScreenCtx.restore();\r\n        return areaData.data[index + 3] !== 0;\r\n    }\r\n\r\n    /**\r\n     * 判断是否在圆内\r\n     * @param point 坐标\r\n     * @param center 圆心\r\n     * @param r 半径\r\n     * @param needScale 是否为圆形点击检测\r\n     * @returns 布尔值\r\n     */\r\n    isPointInCircle(point: Point, center: Point, r: number): boolean {\r\n        const [x, y] = point;\r\n        const [x0, y0] = center.map((a) => a * this.scale);\r\n        const distance = Math.sqrt((x0 + this.originX - x) ** 2 + (y0 + this.originY - y) ** 2);\r\n        return distance <= r;\r\n    }\r\n\r\n    /**\r\n     * 判断是否在折线内\r\n     * @param point 坐标\r\n     * @param coor 区域坐标\r\n     * @returns 布尔值\r\n     */\r\n    isPointInLine(point: Point, coor: Point[]): boolean {\r\n        this.offScreenCtx.save();\r\n        this.offScreenCtx.clearRect(0, 0, this.WIDTH, this.HEIGHT);\r\n        this.offScreenCtx.translate(this.originX, this.originY);\r\n        this.offScreenCtx.lineWidth = 5;\r\n        this.offScreenCtx.beginPath();\r\n        coor.forEach((pt, i) => {\r\n            const [x, y] = pt.map((a) => Math.round(a * this.scale));\r\n            if (i === 0) {\r\n                this.offScreenCtx.moveTo(x, y);\r\n            } else {\r\n                this.offScreenCtx.lineTo(x, y);\r\n            }\r\n        });\r\n        this.offScreenCtx.stroke();\r\n        const areaData = this.offScreenCtx.getImageData(0, 0, this.WIDTH, this.HEIGHT);\r\n        const index = (point[1] - 1) * this.WIDTH * 4 + point[0] * 4;\r\n        this.offScreenCtx.restore();\r\n        return areaData.data[index + 3] !== 0;\r\n    }\r\n\r\n    /**\r\n       * 判断是图形是否属于嵌套关系 (目前只支持矩形和多边形)\r\n       * @param shape1 标注实例\r\n       * @param shape2 标注实例\r\n       * @returns 布尔值\r\n       */\r\n    isNested(shape1: Rect | Polygon, shape2: Rect | Polygon): boolean {\r\n        return isNested(shape1, shape2);\r\n    }\r\n\r\n    /**\r\n     * 绘制矩形\r\n     * @param shape 标注实例\r\n     * @returns\r\n     */\r\n    drawRect(shape: Rect) {\r\n        if (shape.coor.length !== 2) return;\r\n        const { strokeStyle, fillStyle, active, creating, coor, lineWidth } = shape;\r\n        const [[x0, y0], [x1, y1]] = coor.map((a: Point) => a.map((b) => Math.round(b * this.scale)));\r\n        this.ctx.save();\r\n        this.ctx.lineWidth = lineWidth || this.lineWidth;\r\n        this.ctx.fillStyle = fillStyle || this.fillStyle;\r\n        this.ctx.strokeStyle = (active || creating) ? this.activeStrokeStyle : (strokeStyle || this.strokeStyle);\r\n        const w = x1 - x0;\r\n        const h = y1 - y0;\r\n        if (!creating) this.ctx.fillRect(x0, y0, w, h);\r\n        this.ctx.strokeRect(x0, y0, w, h);\r\n        this.ctx.restore();\r\n        this.drawLabel(coor[0], shape);\r\n    }\r\n\r\n    /**\r\n     * 绘制多边形\r\n     * @param shape 标注实例\r\n     */\r\n    drawPolygon(shape: Polygon) {\r\n        const { strokeStyle, fillStyle, active, creating, coor, lineWidth } = shape;\r\n        this.ctx.save();\r\n        this.ctx.lineJoin = 'round';\r\n        this.ctx.lineWidth = lineWidth || this.lineWidth;\r\n        this.ctx.fillStyle = fillStyle || this.fillStyle;\r\n        this.ctx.strokeStyle = (active || creating) ? this.activeStrokeStyle : (strokeStyle || this.strokeStyle);\r\n        this.ctx.beginPath();\r\n        coor.forEach((el: Point, i) => {\r\n            const [x, y] = el.map((a) => Math.round(a * this.scale));\r\n            if (i === 0) {\r\n                this.ctx.moveTo(x, y);\r\n            } else {\r\n                this.ctx.lineTo(x, y);\r\n            }\r\n        });\r\n        if (creating) {\r\n            const [x, y] = this.mouse || [];\r\n            this.ctx.lineTo(x - this.originX, y - this.originY);\r\n        } else if (coor.length > 2) {\r\n            this.ctx.closePath();\r\n        }\r\n        this.ctx.fill();\r\n        this.ctx.stroke();\r\n        this.ctx.restore();\r\n        this.drawLabel(coor[0], shape);\r\n    }\r\n\r\n    /**\r\n     * 绘制点\r\n     * @param shape 标注实例\r\n     */\r\n    drawDot(shape: Dot) {\r\n        const { strokeStyle, fillStyle, active, coor, lineWidth } = shape;\r\n        const [x, y] = coor.map((a) => a * this.scale);\r\n        this.ctx.save();\r\n        this.ctx.lineWidth = lineWidth || this.lineWidth;\r\n        this.ctx.fillStyle = fillStyle || this.ctrlFillStyle;\r\n        this.ctx.strokeStyle = active ? this.activeStrokeStyle : (strokeStyle || this.strokeStyle);\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(x, y, this.ctrlRadius, 0, 2 * Math.PI, true);\r\n        this.ctx.fill();\r\n        this.ctx.arc(x, y, this.ctrlRadius, 0, 2 * Math.PI, true);\r\n        this.ctx.stroke();\r\n        this.ctx.restore();\r\n        this.drawLabel(coor as Point, shape);\r\n    }\r\n\r\n    /**\r\n     * 绘制圆\r\n     * @param shape 标注实例\r\n     */\r\n    drawCirle(shape: Circle) {\r\n        const { strokeStyle, fillStyle, active, coor, creating, radius, ctrlsData, lineWidth } = shape;\r\n        const [x, y] = coor.map((a) => a * this.scale);\r\n        this.ctx.save();\r\n        this.ctx.lineWidth = lineWidth || this.lineWidth;\r\n        this.ctx.fillStyle = fillStyle || this.fillStyle;\r\n        this.ctx.strokeStyle = (active || creating) ? this.activeStrokeStyle : (strokeStyle || this.strokeStyle);\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(x, y, radius * this.scale, 0, 2 * Math.PI, true);\r\n        this.ctx.fill();\r\n        this.ctx.arc(x, y, radius * this.scale, 0, 2 * Math.PI, true);\r\n        this.ctx.stroke();\r\n        this.ctx.restore();\r\n        this.drawLabel(ctrlsData[0] as Point, shape);\r\n    }\r\n\r\n    /**\r\n     * 绘制折线\r\n     * @param shape 标注实例\r\n     */\r\n    drawLine(shape: Line) {\r\n        const { strokeStyle, active, creating, coor, lineWidth } = shape;\r\n        this.ctx.save();\r\n        this.ctx.lineJoin = 'round';\r\n        this.ctx.lineWidth = lineWidth || this.lineWidth;\r\n        this.ctx.strokeStyle = (active || creating) ? this.activeStrokeStyle : (strokeStyle || this.strokeStyle);\r\n        this.ctx.beginPath();\r\n        coor.forEach((el: Point, i) => {\r\n            const [x, y] = el.map((a) => Math.round(a * this.scale));\r\n            if (i === 0) {\r\n                this.ctx.moveTo(x, y);\r\n            } else {\r\n                this.ctx.lineTo(x, y);\r\n            }\r\n        });\r\n        if (creating) {\r\n            const [x, y] = this.mouse || [];\r\n            this.ctx.lineTo(x - this.originX, y - this.originY);\r\n        }\r\n        this.ctx.stroke();\r\n        this.ctx.restore();\r\n        this.drawLabel(coor[0], shape);\r\n    }\r\n\r\n    /**\r\n     * 绘制控制点\r\n     * @param point 坐标\r\n     */\r\n    drawCtrl(point: Point) {\r\n        const [x, y] = point.map((a) => a * this.scale);\r\n        this.ctx.save();\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = this.ctrlFillStyle;\r\n        this.ctx.strokeStyle = this.ctrlStrokeStyle;\r\n        this.ctx.arc(x, y, this.ctrlRadius, 0, 2 * Math.PI, true);\r\n        this.ctx.fill();\r\n        this.ctx.arc(x, y, this.ctrlRadius, 0, 2 * Math.PI, true);\r\n        this.ctx.stroke();\r\n        this.ctx.restore();\r\n    }\r\n\r\n    /**\r\n     * 绘制控制点列表\r\n     * @param shape 标注实例\r\n     */\r\n    drawCtrlList(shape: Rect | Polygon | Line) {\r\n        shape.ctrlsData.forEach((point, i) => {\r\n            if (shape.type === Shape.Circle) {\r\n                if (i === 1) this.drawCtrl(point);\r\n            } else {\r\n                this.drawCtrl(point);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 绘制label\r\n     * @param point 位置\r\n     * @param label 文本\r\n     */\r\n    drawLabel(point: Point, shape: AllShape) {\r\n        const { label = '', labelFillStyle = '', labelFont = '', textFillStyle = '', hideLabel, labelUp, lineWidth } = shape;\r\n        const isHideLabel = typeof hideLabel === 'boolean' ? hideLabel : this.hideLabel;\r\n        const isLabelUp = typeof labelUp === 'boolean' ? labelUp : this.labelUp;\r\n        const currLineWidth = lineWidth || this.lineWidth;\r\n\r\n        if (label.length && !isHideLabel) {\r\n            this.ctx.font = labelFont || this.labelFont;\r\n            const textPaddingLeft = 4;\r\n            const textPaddingTop = 4;\r\n            const newText = label.length < this.labelMaxLen + 1 ? label : `${label.slice(0, this.labelMaxLen)}...`;\r\n            const text = this.ctx.measureText(newText);\r\n            const font = parseInt(this.ctx.font) - 4;\r\n            const labelWidth = text.width + textPaddingLeft * 2;\r\n            const labelHeight = font + textPaddingTop * 2;\r\n            const [x, y] = point.map((a) => a * this.scale);\r\n            const toleft = (this.IMAGE_ORIGIN_WIDTH - point[0]) < labelWidth / this.scale;\r\n            const toTop = (this.IMAGE_ORIGIN_HEIGHT - point[1]) < labelHeight / this.scale;\r\n            const toTop2 = point[1] > labelHeight / this.scale;\r\n            const isup = isLabelUp ? toTop2 : toTop;\r\n            this.ctx.save();\r\n            this.ctx.fillStyle = labelFillStyle || this.labelFillStyle;\r\n            this.ctx.fillRect(toleft ? (x - text.width - textPaddingLeft - currLineWidth / 2) : (x + currLineWidth / 2), isup ? (y - labelHeight - currLineWidth / 2) : (y + currLineWidth / 2), labelWidth, labelHeight);\r\n            this.ctx.fillStyle = textFillStyle || this.textFillStyle;\r\n            this.ctx.fillText(newText, toleft ? (x - text.width) : (x + textPaddingLeft + currLineWidth / 2), isup ? (y - labelHeight + font + textPaddingTop) : (y + font + textPaddingTop + currLineWidth / 2), 180);\r\n            this.ctx.restore();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新画布\r\n     */\r\n    update() {\r\n        window.cancelAnimationFrame(this.timer);\r\n        this.timer = window.requestAnimationFrame(() => {\r\n            this.ctx.save();\r\n            this.ctx.clearRect(0, 0, this.WIDTH, this.HEIGHT);\r\n            this.ctx.translate(this.originX, this.originY);\r\n            if (this.IMAGE_WIDTH && this.IMAGE_HEIGHT) {\r\n                this.ctx.drawImage(this.image, 0, 0, this.IMAGE_WIDTH, this.IMAGE_HEIGHT);\r\n            }\r\n            const renderList = this.focusMode ? (this.activeShape.type ? [this.activeShape] : []) : this.dataset;\r\n            for (let i = 0; i < renderList.length; i++) {\r\n                const shape = renderList[i];\r\n                if (shape.hide) continue;\r\n                switch (shape.type) {\r\n                    case Shape.Rect:\r\n                        this.drawRect(shape as Rect);\r\n                        break;\r\n                    case Shape.Polygon:\r\n                        this.drawPolygon(shape as Polygon);\r\n                        break;\r\n                    case Shape.Dot:\r\n                        this.drawDot(shape as Dot);\r\n                        break;\r\n                    case Shape.Line:\r\n                        this.drawLine(shape as Line);\r\n                        break;\r\n                    case Shape.Circle:\r\n                        this.drawCirle(shape as Circle);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n            if ([Shape.Rect, Shape.Polygon, Shape.Line, Shape.Circle].includes(this.activeShape.type) && !this.activeShape.hide) {\r\n                this.drawCtrlList(this.activeShape);\r\n            }\r\n            this.ctx.restore();\r\n            this.emit('updated', this.dataset);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 删除指定矩形\r\n     * @param index number\r\n     */\r\n    deleteByIndex(index: number) {\r\n        const num = this.dataset.findIndex((x) => x.index === index);\r\n        if (num > -1) {\r\n            this.emit('delete', this.dataset[num]);\r\n            this.dataset.splice(num, 1);\r\n            this.dataset.forEach((item, i) => { item.index = i; });\r\n            this.update();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 计算缩放步长\r\n     */\r\n    calcStep(flag = '') {\r\n        if (this.IMAGE_WIDTH < this.WIDTH && this.IMAGE_HEIGHT < this.HEIGHT) {\r\n            if (flag === '' || flag === 'b') {\r\n                this.setScale(true, false, true);\r\n                this.calcStep('b');\r\n            }\r\n        }\r\n        if (this.IMAGE_WIDTH > this.WIDTH || this.IMAGE_HEIGHT > this.HEIGHT) {\r\n            if (flag === '' || flag === 's') {\r\n                this.setScale(false, false, true);\r\n                this.calcStep('s');\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 缩放\r\n     * @param type true放大5%，false缩小5%\r\n     * @param center 缩放中心 center|mouse\r\n     * @param pure 不绘制\r\n     */\r\n    setScale(type: boolean, byMouse = false, pure = false) {\r\n        if (this.lock) return;\r\n        if ((!type && this.imageMin < 20) || (type && this.IMAGE_WIDTH > this.imageOriginMax * 100)) return;\r\n        if (type) { this.scaleStep++; } else { this.scaleStep--; }\r\n        let realToLeft = 0;\r\n        let realToRight = 0;\r\n        const [x, y] = this.mouse || [];\r\n        if (byMouse) {\r\n            realToLeft = (x - this.originX) / this.scale;\r\n            realToRight = (y - this.originY) / this.scale;\r\n        }\r\n        const abs = Math.abs(this.scaleStep);\r\n        const width = this.IMAGE_WIDTH;\r\n        this.IMAGE_WIDTH = Math.round(this.IMAGE_ORIGIN_WIDTH * (this.scaleStep >= 0 ? 1.05 : 0.95) ** abs);\r\n        this.IMAGE_HEIGHT = Math.round(this.IMAGE_ORIGIN_HEIGHT * (this.scaleStep >= 0 ? 1.05 : 0.95) ** abs);\r\n        if (byMouse) {\r\n            this.originX = x - realToLeft * this.scale;\r\n            this.originY = y - realToRight * this.scale;\r\n        } else {\r\n            const scale = this.IMAGE_WIDTH / width;\r\n            this.originX = this.WIDTH / 2 - (this.WIDTH / 2 - this.originX) * scale;\r\n            this.originY = this.HEIGHT / 2 - (this.HEIGHT / 2 - this.originY) * scale;\r\n        }\r\n        if (!pure) {\r\n            this.update();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 适配背景图\r\n     */\r\n    fitZoom() {\r\n        this.calcStep();\r\n        if (this.IMAGE_HEIGHT / this.IMAGE_WIDTH >= this.HEIGHT / this.WIDTH) {\r\n            this.IMAGE_WIDTH = this.IMAGE_ORIGIN_WIDTH / (this.IMAGE_ORIGIN_HEIGHT / this.HEIGHT);\r\n            this.IMAGE_HEIGHT = this.HEIGHT;\r\n        } else {\r\n            this.IMAGE_WIDTH = this.WIDTH;\r\n            this.IMAGE_HEIGHT = this.IMAGE_ORIGIN_HEIGHT / (this.IMAGE_ORIGIN_WIDTH / this.WIDTH);\r\n        }\r\n        this.originX = (this.WIDTH - this.IMAGE_WIDTH) / 2;\r\n        this.originY = (this.HEIGHT - this.IMAGE_HEIGHT) / 2;\r\n        this.update();\r\n    }\r\n\r\n    /**\r\n     * 设置专注模式\r\n     * @param type {boolean}\r\n     */\r\n    setFocusMode(type: boolean) {\r\n        this.focusMode = type;\r\n        this.update();\r\n    }\r\n\r\n    /**\r\n     * 销毁\r\n     */\r\n    destroy() {\r\n        this.image.removeEventListener('load', this.handleLoad);\r\n        this.canvas.removeEventListener('contextmenu', this.handleContextmenu);\r\n        this.canvas.removeEventListener('mousewheel', this.handleMousewheel);\r\n        this.canvas.removeEventListener('mousedown', this.handleMouseDown);\r\n        this.canvas.removeEventListener('touchend', this.handleMouseDown);\r\n        this.canvas.removeEventListener('mousemove', this.handleMouseMove);\r\n        this.canvas.removeEventListener('touchmove', this.handleMouseMove);\r\n        this.canvas.removeEventListener('mouseup', this.handleMouseUp);\r\n        this.canvas.removeEventListener('touchend', this.handleMouseUp);\r\n        this.canvas.removeEventListener('dblclick', this.handleDblclick);\r\n        document.body.removeEventListener('keydown', this.handleKeydown, true);\r\n        document.body.removeEventListener('keyup', this.handleKeyup, true);\r\n        this.canvas.width = this.WIDTH;\r\n        this.canvas.height = this.HEIGHT;\r\n        this.canvas.style.width = null;\r\n        this.canvas.style.height = null;\r\n        this.canvas.style.userSelect = null;\r\n    }\r\n\r\n    /**\r\n     * 重新设置画布大小\r\n     */\r\n    resize() {\r\n        this.canvas.width = null;\r\n        this.canvas.height = null;\r\n        this.canvas.style.width = null;\r\n        this.canvas.style.height = null;\r\n        this.initSetting();\r\n        this.update();\r\n    }\r\n}"],"names":["isPointInPolygon","x","y","vertices","inside","n","length","i","j","xi","yi","xj","yj","Shape$1","constructor","item","index","this","label","hideLabel","coor","strokeStyle","fillStyle","lineWidth","labelFillStyle","textFillStyle","labelFont","type","active","creating","dragging","uuid","s","hexDigits","m","Math","floor","random","slice","join","createUuid","labelUp","Object","assign","Rect","Shape","super","ctrlsData","x0","y0","x1","y1","Polygon","Dot","EventBus","_eventTree","on","eventName","cb","fns","Array","isArray","push","emit","payload","forEach","fn","off","find","splice","Line","Circle","radius","CanvasSelect","el","src","lock","readonly","MIN_WIDTH","MIN_HEIGHT","MIN_RADIUS","activeStrokeStyle","activeFillStyle","ctrlStrokeStyle","ctrlFillStyle","ctrlRadius","labelMaxLen","WIDTH","HEIGHT","dataset","remmber","mouse","remmberOrigin","createType","None","ctrlIndex","image","Image","IMAGE_ORIGIN_WIDTH","IMAGE_WIDTH","IMAGE_ORIGIN_HEIGHT","IMAGE_HEIGHT","originX","originY","scaleStep","scrollZoom","dblTouch","dblTouchStore","alpha","focusMode","evt","scaleTouchStore","isTouch2","isMobile","navigator","userAgent","includes","ctrlKey","handleLoad","bind","handleContextmenu","handleMousewheel","handleMouseDown","handleMouseMove","handleMouseUp","handleDblclick","handleKeyup","handleKeydown","container","document","querySelector","HTMLCanvasElement","canvas","offScreen","createElement","initSetting","initEvents","setImage","console","warn","activeShape","scale","imageMin","min","imageOriginMax","max","mergeEvent","e","mouseX","mouseY","mouseCX","mouseCY","clientX","clientY","touches","target","left","top","getBoundingClientRect","round","clientX1","clientY1","abs","offsetX","offsetY","width","height","fitZoom","preventDefault","stopPropagation","setScale","deltaY","buttons","ctrls","findIndex","isPointInCircle","isInBackground","nx","ny","hitShapeIndex","hitShape","hitOnShape","pt","sort","a","b","newShape","curPoint","sp","update","a0","b0","a1","b1","newPoint","newRadius","noLimit","w","h","t1","t2","tar","r","sqrt","pow","which","touch0","touch1","cur","Date","now","pop","canPolygon","canLine","key","deleteByIndex","dpr","window","devicePixelRatio","style","userSelect","ctx","getContext","clientWidth","clientHeight","offScreenCtx","willReadFrequently","addEventListener","body","url","setData","data","setTimeout","initdata","prototype","toString","call","shape","mousePoint","isPointInRect","isPointInLine","point","map","save","clearRect","translate","beginPath","moveTo","lineTo","closePath","fill","areaData","getImageData","restore","center","stroke","isNested","shape1","shape2","x2","y2","x3","y3","x4","y4","vertices1","vertices2","drawRect","fillRect","strokeRect","drawLabel","drawPolygon","lineJoin","drawDot","arc","PI","drawCirle","drawLine","drawCtrl","drawCtrlList","isHideLabel","isLabelUp","currLineWidth","font","textPaddingLeft","textPaddingTop","newText","text","measureText","parseInt","labelWidth","labelHeight","toleft","toTop","toTop2","isup","fillText","cancelAnimationFrame","timer","requestAnimationFrame","drawImage","renderList","hide","num","calcStep","flag","byMouse","pure","realToLeft","realToRight","setFocusMode","destroy","removeEventListener","resize"],"mappings":"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"}