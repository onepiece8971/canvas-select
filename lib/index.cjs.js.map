{"version":3,"file":"index.cjs.js","sources":["../src/tools.ts","../src/shape/Shape.ts","../src/shape/Rect.ts","../src/shape/Polygon.ts","../src/shape/Dot.ts","../src/EventBus.ts","../src/shape/Line.ts","../src/shape/Circle.ts","../src/index.ts"],"sourcesContent":["export function createUuid(): string {\r\n  const s: any[] = [];\r\n  const hexDigits = \"0123456789abcdef\";\r\n  for (let i = 0; i < 36; i++) {\r\n    const m = Math.floor(Math.random() * 0x10);\r\n    s[i] = hexDigits.slice(m, m + 1);\r\n  }\r\n  s[14] = \"4\";\r\n  const n = (s[19] & 0x3) | 0x8;\r\n  s[19] = hexDigits.slice(n, n + 1);\r\n  s[8] = s[13] = s[18] = s[23] = \"-\";\r\n  const uuid = s.join(\"\");\r\n  return uuid;\r\n}\r\n\r\n/**\r\n * 判断图形是否符合嵌套关系, 业务需求：只需要判断shape2所有的点是否都在shape1内部即可\r\n * @param shape1 参数1\r\n * @param shape2 参数2\r\n * @reutrn Boolean 符合条件返回true 否则返回false\r\n */\r\n\r\nexport function isNested(shape1: any, shape2: any): boolean {\r\n  if (shape1.type === 1 && shape2.type === 1) {\r\n    // 矩形和矩形的判断逻辑\r\n    const [[x1, y1], [x2, y2]] = shape1.coor;\r\n    const [[x3, y3], [x4, y4]] = shape2.coor;\r\n\r\n    // if (x1 >= x3 && y1 >= y3 && x2 <= x4 && y2 <= y4) {\r\n    //   return true; // shape1 嵌套在 shape2 内部\r\n    // } else\r\n    if (x1 <= x3 && y1 <= y3 && x2 >= x4 && y2 >= y4) {\r\n      return true; // shape2 嵌套在 shape1 内部\r\n    } else {\r\n      return false; // 两个矩形没有嵌套关系\r\n    }\r\n  } else if (shape1.type === 1 && shape2.type === 2) {\r\n    // 矩形和多边形的判断逻辑，确保多边形所有的坐标点都在矩形里面\r\n    const [[x1, y1], [x2, y2]] = shape1.coor;\r\n    const vertices = shape2.coor;\r\n\r\n    for (let i = 0; i < vertices.length; i++) {\r\n      const [x, y] = vertices[i];\r\n      if (x < x1 || x > x2 || y < y1 || y > y2) {\r\n        return false; // 多边形的顶点在矩形外部，不嵌套\r\n      }\r\n    }\r\n\r\n    return true; // 所有顶点都在矩形内部，嵌套关系成立\r\n  } else if (shape1.type === 2 && shape2.type === 1) {\r\n    // 多边形和矩形的判断逻辑，确保矩形的所有坐标点都在多边形里面\r\n    const vertices = shape2.coor; // 矩形的顶点坐标\r\n\r\n    for (let i = 0; i < vertices.length; i++) {\r\n      const [x, y] = vertices[i];\r\n      if (!isPointInPolygon(x, y, shape1.coor)) {\r\n        return false; // 有一个坐标点不在多边形范围内，返回false\r\n      }\r\n    }\r\n\r\n    return true; // 所有坐标点都在多边形内部，返回true\r\n  } else if (shape1.type === 2 && shape2.type === 2) {\r\n    // 多边形和多边形的判断逻辑\r\n    const vertices1 = shape1.coor;\r\n    const vertices2 = shape2.coor;\r\n\r\n    for (let i = 0; i < vertices2.length; i++) {\r\n      const [x, y] = vertices2[i];\r\n      if (!isPointInPolygon(x, y, vertices1)) {\r\n        return false; // 多边形2的顶点不都在多边形1内部，不嵌套\r\n      }\r\n    }\r\n\r\n    return true; // 有坐标点都在多边形内部，返回true\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isPointInPolygon(x: number, y: number, vertices: any) {\r\n  let inside = false;\r\n  const n = vertices.length;\r\n\r\n  for (let i = 0, j = n - 1; i < n; j = i++) {\r\n    const xi = vertices[i][0];\r\n    const yi = vertices[i][1];\r\n    const xj = vertices[j][0];\r\n    const yj = vertices[j][1];\r\n\r\n    if (yi > y !== yj > y && x < ((xj - xi) * (y - yi)) / (yj - yi) + xi) {\r\n      inside = !inside;\r\n    }\r\n  }\r\n\r\n  return inside;\r\n}\r\n","import { createUuid } from \"../tools\"\r\n\r\ninterface ShapeProp {\r\n    type: number\r\n    [key: string]: any\r\n}\r\nexport default class Shape {\r\n    /** 标签 */\r\n    public label: string = ''\r\n    /** 是否隐藏标签 */\r\n    public hideLabel: boolean = false\r\n    /** 坐标 */\r\n    public coor: any[] = []\r\n    /** 边线颜色 */\r\n    public strokeStyle: string = '#000'\r\n    /** 填充颜色 */\r\n    public fillStyle: string = '#fff'\r\n    /** 边线宽度 */\r\n    public lineWidth: number = 1\r\n    /** 标签填充颜色 */\r\n    public labelFillStyle: string = '#000'\r\n    /** 标签文字颜色 */\r\n    public textFillStyle: string = '#fff'\r\n    /** 标签文字字体 */\r\n    public labelFont: string = '14px Microsoft YaHei'\r\n    /** 1 矩形，2 多边形，3 点，4 折线，5 圆 */\r\n    public type: number = 1 // 形状\r\n    /** 当前是否处于活动状态 */\r\n    public active: boolean = false\r\n    /** 当前是否处于创建状态 */\r\n    public creating: boolean = false\r\n    /** 当前是否处于拖拽状态 */\r\n    public dragging: boolean = false\r\n    /** 索引 */\r\n    public index: number\r\n    /** 唯一标识 */\r\n    public uuid: string = createUuid()\r\n    /** 向上展示label */\r\n    public labelUp: boolean = false\r\n    constructor(item: ShapeProp, index: number) {\r\n        this.index = index\r\n        Object.assign(this, item)\r\n    }\r\n}\r\n","import Shape from './Shape';\r\n\r\nexport default class Rect extends Shape {\r\n  public type = 1\r\n  constructor(item: any, index: number) {\r\n    super(item, index)\r\n  }\r\n  get ctrlsData() {\r\n    const [[x0, y0], [x1, y1]] = this.coor;\r\n    return [\r\n      [x0, y0],\r\n      [x0 + (x1 - x0) / 2, y0],\r\n      [x1, y0],\r\n      [x1, y0 + (y1 - y0) / 2],\r\n      [x1, y1],\r\n      [x0 + (x1 - x0) / 2, y1],\r\n      [x0, y1],\r\n      [x0, y0 + (y1 - y0) / 2],\r\n    ];\r\n  }\r\n}\r\n","import Shape from './Shape';\r\n\r\nexport default class Polygon extends Shape {\r\n  public type = 2\r\n  constructor(item: any, index: number) {\r\n    super(item, index)\r\n  }\r\n  get ctrlsData() {\r\n    return this.coor.length > 2 ? this.coor : [];\r\n  }\r\n}\r\n","import Shape from './Shape';\r\n\r\nexport default class Dot extends Shape {\r\n    public type = 3\r\n    constructor(item: any, index: number) {\r\n        super(item, index)\r\n    }\r\n}\r\n","export default class EventBus {\r\n    private _eventTree: Record<string, any> = {}\r\n    /**\r\n   * 注册事件\r\n   * @param eventName 事件名称\r\n   * @param cb 回调方法\r\n   */\r\n    on(eventName: string, cb: Function) {\r\n        const fns = this._eventTree[eventName];\r\n        if (Array.isArray(fns)) {\r\n            fns.push(cb);\r\n        } else {\r\n            this._eventTree[eventName] = [cb];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 触发事件\r\n     * @param eventName 事件名称\r\n     * @param payload 传递参数\r\n     */\r\n    emit(eventName: string, ...payload: any) {\r\n        const fns = this._eventTree[eventName];\r\n        if (Array.isArray(fns)) {\r\n            fns.forEach((fn) => fn(...payload));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 注销事件\r\n     * @param eventName 事件名称\r\n     * @param cb 传递参数\r\n     */\r\n    off(eventName: string, cb: Function) {\r\n        const fns = this._eventTree[eventName];\r\n        const index = fns.find((fn: Function) => fn === cb);\r\n        if (Array.isArray(fns) && index) {\r\n            fns.splice(index, 1);\r\n        }\r\n    }\r\n}\r\n","import Shape from './Shape';\r\n\r\nexport default class Line extends Shape {\r\n  public type = 4\r\n  constructor(item: any, index: number) {\r\n    super(item, index)\r\n  }\r\n  get ctrlsData() {\r\n    return this.coor.length > 1 ? this.coor : [];\r\n  }\r\n}\r\n","import Shape from './Shape';\r\n\r\nexport default class Circle extends Shape {\r\n    public type = 5\r\n    public radius = 0\r\n    constructor(item: any, index: number) {\r\n        super(item, index)\r\n        this.radius = item.radius || this.radius\r\n    }\r\n    get ctrlsData() {\r\n        const [x, y] = this.coor\r\n        return [\r\n            [x, y - this.radius],\r\n            [x + this.radius, y],\r\n            [x, y + this.radius],\r\n            [x - this.radius, y]\r\n        ]\r\n    }\r\n}\r\n","import Rect from './shape/Rect';\r\nimport Polygon from './shape/Polygon';\r\nimport Dot from './shape/Dot';\r\nimport EventBus from './EventBus';\r\nimport Line from './shape/Line';\r\nimport Circle from './shape/Circle';\r\nimport { isNested } from \"./tools\";\r\n\r\nexport type Point = [number, number];\r\nexport type AllShape = Rect | Polygon | Dot | Line | Circle;\r\nenum Shape {\r\n    None,\r\n    Rect,\r\n    Polygon,\r\n    Dot,\r\n    Line,\r\n    Circle\r\n}\r\n\r\nexport default class CanvasSelect extends EventBus {\r\n    /** 只读模式，画布不允许任何交互 */\r\n    lock: boolean = false;\r\n    /** 只读模式，仅支持查看 */\r\n    readonly: boolean = false;\r\n    /** 最小矩形宽度 */\r\n    MIN_WIDTH = 10;\r\n    /** 最小矩形高度 */\r\n    MIN_HEIGHT = 10;\r\n    /** 最小圆形半径 */\r\n    MIN_RADIUS = 5;\r\n    /** 边线颜色 */\r\n    strokeStyle = '#0f0';\r\n    /** 填充颜色 */\r\n    fillStyle = 'rgba(0, 0, 255,0.1)';\r\n    /** 边线宽度 */\r\n    lineWidth = 1;\r\n    /** 当前选中的标注边线颜色 */\r\n    activeStrokeStyle = '#f00';\r\n    /** 当前选中的标注填充颜色 */\r\n    activeFillStyle = 'rgba(255, 0, 0,0.1)';\r\n    /** 控制点边线颜色 */\r\n    ctrlStrokeStyle = '#000';\r\n    /** 控制点填充颜色 */\r\n    ctrlFillStyle = '#fff';\r\n    /** 控制点半径 */\r\n    ctrlRadius = 3;\r\n    /** 是否隐藏标签 */\r\n    hideLabel = false;\r\n    /** 标签背景填充颜色 */\r\n    labelFillStyle = '#fff';\r\n    /** 标签字体 */\r\n    labelFont = '10px sans-serif';\r\n    /** 标签文字颜色 */\r\n    textFillStyle = '#000';\r\n    /** 标签字符最大长度，超出使用省略号 */\r\n    labelMaxLen = 10;\r\n    /** 画布宽度 */\r\n    WIDTH = 0;\r\n    /** 画布高度 */\r\n    HEIGHT = 0;\r\n\r\n    canvas: HTMLCanvasElement | any;\r\n\r\n    ctx: CanvasRenderingContext2D | any;\r\n    /** 所有标注数据 */\r\n    dataset: AllShape[] = [];\r\n\r\n    offScreen: HTMLCanvasElement | any;\r\n\r\n    offScreenCtx: CanvasRenderingContext2D | any;\r\n    /** 记录锚点距离 */\r\n    remmber: number[][] = [];\r\n    /** 记录鼠标位置 */\r\n    mouse: Point = [0, 0];\r\n    /** 记录背景图鼠标位移 */\r\n    remmberOrigin: number[] = [0, 0];\r\n    /** 0 不创建，1 矩形，2 多边形，3 点，4 折线，5 圆 */\r\n    createType: Shape = Shape.None; //\r\n    /** 控制点索引 */\r\n    ctrlIndex = -1;\r\n    /** 背景图片 */\r\n    image: HTMLImageElement = new Image();\r\n    /** 图片原始宽度 */\r\n    IMAGE_ORIGIN_WIDTH: number = 0;\r\n    /** 图片缩放宽度 */\r\n    IMAGE_WIDTH = 0;\r\n    /** 图片原始高度 */\r\n    IMAGE_ORIGIN_HEIGHT = 0;\r\n    /** 图片缩放高度 */\r\n    IMAGE_HEIGHT = 0;\r\n    /** 原点x */\r\n    originX = 0;\r\n    /** 原点y */\r\n    originY = 0;\r\n    /** 缩放步长 */\r\n    scaleStep = 0;\r\n    /** 滚动缩放 */\r\n    scrollZoom = true;\r\n\r\n    private timer: any;\r\n    /** 最小touch双击时间 */\r\n    dblTouch = 300;\r\n    /** 记录touch双击开始时间 */\r\n    dblTouchStore = 0; //\r\n    /** 这个选项可以帮助浏览器进行内部优化 */\r\n    alpha = true;\r\n    /** 专注模式 */\r\n    focusMode = false;\r\n    /** 记录当前事件 */\r\n    public evt: MouseEvent | TouchEvent | KeyboardEvent | null = null;\r\n    /** 触控缩放时记录上一次两点距离 */\r\n    scaleTouchStore = 0;\r\n    /** 当前是否为双指触控 */\r\n    isTouch2 = false;\r\n    isMobile = navigator.userAgent.includes('Mobile');\r\n    /** 向上展示label */\r\n    labelUp = false;\r\n    private ctrlKey = false;\r\n    /**\r\n     * @param el Valid CSS selector string, or DOM\r\n     * @param src image src\r\n     */\r\n    constructor(el: HTMLCanvasElement | string, src?: string) {\r\n        super();\r\n        this.handleLoad = this.handleLoad.bind(this);\r\n        this.handleContextmenu = this.handleContextmenu.bind(this);\r\n        this.handleMousewheel = this.handleMousewheel.bind(this);\r\n        this.handleMouseDown = this.handleMouseDown.bind(this);\r\n        this.handleMouseMove = this.handleMouseMove.bind(this);\r\n        this.handleMouseUp = this.handleMouseUp.bind(this);\r\n        this.handleDblclick = this.handleDblclick.bind(this);\r\n        this.handleKeyup = this.handleKeyup.bind(this);\r\n        this.handleKeydown = this.handleKeydown.bind(this);\r\n        const container = typeof el === 'string' ? document.querySelector(el) : el;\r\n        if (container instanceof HTMLCanvasElement) {\r\n            this.canvas = container;\r\n            this.offScreen = document.createElement('canvas');\r\n            this.initSetting();\r\n            this.initEvents();\r\n            src && this.setImage(src);\r\n        } else {\r\n            console.warn('HTMLCanvasElement is required!');\r\n        }\r\n    }\r\n\r\n    /** 当前当前选中的标注 */\r\n    get activeShape() {\r\n        return this.dataset.find(x => x.active) || {} as any;\r\n    }\r\n\r\n    /** 当前缩放比例 */\r\n    get scale() {\r\n        if (this.IMAGE_ORIGIN_WIDTH && this.IMAGE_WIDTH) {\r\n            return this.IMAGE_WIDTH / this.IMAGE_ORIGIN_WIDTH;\r\n        }\r\n        return 1;\r\n    }\r\n\r\n    /** 图片最小边尺寸 */\r\n    get imageMin() {\r\n        return Math.min(this.IMAGE_WIDTH, this.IMAGE_HEIGHT);\r\n    }\r\n\r\n    /** 图片原始最大边尺寸 */\r\n    get imageOriginMax() {\r\n        return Math.max(this.IMAGE_ORIGIN_WIDTH, this.IMAGE_ORIGIN_HEIGHT);\r\n    }\r\n\r\n    /** 合成事件 */\r\n    private mergeEvent(e: TouchEvent | MouseEvent) {\r\n        let mouseX = 0;\r\n        let mouseY = 0;\r\n        let mouseCX = 0;\r\n        let mouseCY = 0;\r\n        if (this.isMobile) {\r\n            const { clientX, clientY } = (e as TouchEvent).touches[0];\r\n            const target = e.target as HTMLCanvasElement;\r\n            const { left, top } = target.getBoundingClientRect();\r\n            mouseX = Math.round(clientX - left);\r\n            mouseY = Math.round(clientY - top);\r\n            if ((e as TouchEvent).touches.length === 2) {\r\n                const { clientX: clientX1 = 0, clientY: clientY1 = 0 } = (e as TouchEvent).touches[1] || {};\r\n                mouseCX = Math.round(Math.abs((clientX1 - clientX) / 2 + clientX) - left);\r\n                mouseCY = Math.round(Math.abs((clientY1 - clientY) / 2 + clientY) - top);\r\n            }\r\n        } else {\r\n            mouseX = (e as MouseEvent).offsetX;\r\n            mouseY = (e as MouseEvent).offsetY;\r\n        }\r\n        return { ...e, mouseX, mouseY, mouseCX, mouseCY };\r\n    }\r\n\r\n    private handleLoad() {\r\n        this.emit('load', this.image.src);\r\n        this.IMAGE_ORIGIN_WIDTH = this.IMAGE_WIDTH = this.image.width;\r\n        this.IMAGE_ORIGIN_HEIGHT = this.IMAGE_HEIGHT = this.image.height;\r\n        this.fitZoom();\r\n    }\r\n\r\n    private handleContextmenu(e: MouseEvent) {\r\n        e.preventDefault();\r\n        this.evt = e;\r\n        if (this.lock) return;\r\n    }\r\n\r\n    private handleMousewheel(e: WheelEvent) {\r\n        e.stopPropagation();\r\n        this.evt = e;\r\n        if (this.lock || !this.scrollZoom) return;\r\n        const { mouseX, mouseY } = this.mergeEvent(e);\r\n        this.mouse = [mouseX, mouseY];\r\n        this.setScale(e.deltaY < 0, true);\r\n    }\r\n\r\n    private handleMouseDown(e: MouseEvent | TouchEvent) {\r\n        e.stopPropagation();\r\n        this.evt = e;\r\n        if (this.lock) return;\r\n        const { mouseX, mouseY, mouseCX, mouseCY } = this.mergeEvent(e);\r\n        const offsetX = Math.round(mouseX / this.scale);\r\n        const offsetY = Math.round(mouseY / this.scale);\r\n        this.mouse = this.isMobile && (e as TouchEvent).touches.length === 2 ? [mouseCX, mouseCY] : [mouseX, mouseY];\r\n        this.remmberOrigin = [mouseX - this.originX, mouseY - this.originY];\r\n        if ((!this.isMobile && (e as MouseEvent).buttons === 1) || (this.isMobile && (e as TouchEvent).touches.length === 1)) { // 鼠标左键\r\n            const ctrls = this.activeShape.ctrlsData || [];\r\n            this.ctrlIndex = ctrls.findIndex((coor: Point) => this.isPointInCircle(this.mouse, coor, this.ctrlRadius));\r\n            if (this.ctrlIndex > -1 && !this.readonly) { // 点击到控制点\r\n                const [x0, y0] = ctrls[this.ctrlIndex];\r\n                if (this.activeShape.type === Shape.Polygon && this.activeShape.coor.length > 2 && this.ctrlIndex === 0) {\r\n                    this.handleDblclick(e)\r\n                }\r\n                this.remmber = [[offsetX - x0, offsetY - y0]];\r\n            } else if (this.isInBackground(e)) {\r\n                if (this.activeShape.creating && !this.readonly) { // 创建中\r\n                    if ([Shape.Polygon, Shape.Line].includes(this.activeShape.type)) {\r\n                        const [x, y] = this.activeShape.coor[this.activeShape.coor.length - 1];\r\n                        if (x !== offsetX && y !== offsetY) {\r\n                            const nx = Math.round(offsetX - this.originX / this.scale);\r\n                            const ny = Math.round(offsetY - this.originY / this.scale);\r\n                            this.activeShape.coor.push([nx, ny]);\r\n                        }\r\n                    }\r\n                } else if (this.createType !== Shape.None && !this.readonly && !this.ctrlKey) { // 开始创建\r\n                    let newShape: any;\r\n                    const nx = Math.round(offsetX - this.originX / this.scale);\r\n                    const ny = Math.round(offsetY - this.originY / this.scale);\r\n                    const curPoint: Point = [nx, ny];\r\n                    switch (this.createType) {\r\n                        case Shape.Rect:\r\n                            newShape = new Rect({ coor: [curPoint, curPoint] }, this.dataset.length);\r\n                            newShape.creating = true;\r\n                            break;\r\n                        case Shape.Polygon:\r\n                            newShape = new Polygon({ coor: [curPoint] }, this.dataset.length);\r\n                            newShape.creating = true;\r\n                            break;\r\n                        case Shape.Dot:\r\n                            newShape = new Dot({ coor: curPoint }, this.dataset.length);\r\n                            this.emit('add', newShape);\r\n                            break;\r\n                        case Shape.Line:\r\n                            newShape = new Line({ coor: [curPoint] }, this.dataset.length);\r\n                            newShape.creating = true;\r\n                            break;\r\n                        case Shape.Circle:\r\n                            newShape = new Circle({ coor: curPoint }, this.dataset.length);\r\n                            newShape.creating = true;\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                    this.dataset.forEach((sp) => { sp.active = false; });\r\n                    newShape.active = true;\r\n                    this.dataset.push(newShape);\r\n                } else {\r\n                    // 是否点击到形状\r\n                    const [hitShapeIndex, hitShape] = this.hitOnShape(this.mouse);\r\n                    if (hitShapeIndex > -1) {\r\n                        hitShape.dragging = true;\r\n                        this.dataset.forEach((item, i) => item.active = i === hitShapeIndex);\r\n                        this.dataset.splice(hitShapeIndex, 1);\r\n                        this.dataset.push(hitShape);\r\n                        if (!this.readonly) {\r\n                            this.remmber = [];\r\n                            if ([Shape.Dot, Shape.Circle].includes(hitShape.type)) {\r\n                                const [x, y] = hitShape.coor;\r\n                                this.remmber = [[offsetX - x, offsetY - y]];\r\n                            } else {\r\n                                hitShape.coor.forEach((pt: any) => {\r\n                                    this.remmber.push([offsetX - pt[0], offsetY - pt[1]]);\r\n                                });\r\n                            }\r\n                        }\r\n                        this.emit('select', hitShape);\r\n                    } else {\r\n                        this.activeShape.active = false;\r\n                        this.dataset.sort((a, b) => a.index - b.index);\r\n                        this.emit('select', null);\r\n                    }\r\n                }\r\n                this.update();\r\n            }\r\n        }\r\n    }\r\n\r\n    private handleMouseMove(e: MouseEvent | TouchEvent) {\r\n        e.stopPropagation();\r\n        this.evt = e;\r\n        if (this.lock) return;\r\n        const { mouseX, mouseY, mouseCX, mouseCY } = this.mergeEvent(e);\r\n        const offsetX = Math.round(mouseX / this.scale);\r\n        const offsetY = Math.round(mouseY / this.scale);\r\n        this.mouse = this.isMobile && (e as TouchEvent).touches.length === 2 ? [mouseCX, mouseCY] : [mouseX, mouseY];\r\n        if (((!this.isMobile && (e as MouseEvent).buttons === 1) || (this.isMobile && (e as TouchEvent).touches.length === 1)) && this.activeShape.type) {\r\n            if (this.ctrlIndex > -1 && this.remmber.length && (this.isInBackground(e) || this.activeShape.type === Shape.Circle)) {\r\n                const [[x, y]] = this.remmber;\r\n                // resize矩形\r\n                if (this.activeShape.type === Shape.Rect) {\r\n                    const [[x0, y0], [x1, y1]] = this.activeShape.coor;\r\n                    let coor: Point[] = [];\r\n                    switch (this.ctrlIndex) {\r\n                        case 0:\r\n                            coor = [[offsetX - x, offsetY - y], [x1, y1]];\r\n                            break;\r\n                        case 1:\r\n                            coor = [[x0, offsetY - y], [x1, y1]];\r\n                            break;\r\n                        case 2:\r\n                            coor = [[x0, offsetY - y], [offsetX - x, y1]];\r\n                            break;\r\n                        case 3:\r\n                            coor = [[x0, y0], [offsetX - x, y1]];\r\n                            break;\r\n                        case 4:\r\n                            coor = [[x0, y0], [offsetX - x, offsetY - y]];\r\n                            break;\r\n                        case 5:\r\n                            coor = [[x0, y0], [x1, offsetY - y]];\r\n                            break;\r\n                        case 6:\r\n                            coor = [[offsetX - x, y0], [x1, offsetY - y]];\r\n                            break;\r\n                        case 7:\r\n                            coor = [[offsetX - x, y0], [x1, y1]];\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                    let [[a0, b0], [a1, b1]] = coor;\r\n                    if (\r\n                        a0 < 0 ||\r\n                        a1 < 0 ||\r\n                        b0 < 0 ||\r\n                        b1 < 0 ||\r\n                        a1 > this.IMAGE_ORIGIN_WIDTH ||\r\n                        b1 > this.IMAGE_ORIGIN_HEIGHT\r\n                    ) {\r\n                        // 偶然触发 超出边界处理\r\n                        a0 < 0 && (a0 = 0);\r\n                        a1 < 0 && (a1 = 0);\r\n                        b0 < 0 && (b0 = 0);\r\n                        b1 < 0 && (b1 = 0);\r\n                        if (a1 > this.IMAGE_ORIGIN_WIDTH) {\r\n                            a1 = this.IMAGE_ORIGIN_WIDTH;\r\n                        }\r\n                        if (b1 > this.IMAGE_ORIGIN_HEIGHT) {\r\n                            b1 = this.IMAGE_ORIGIN_HEIGHT;\r\n                        }\r\n                    }\r\n\r\n                    if (a1 - a0 >= this.MIN_WIDTH && b1 - b0 >= this.MIN_HEIGHT) {\r\n                        this.activeShape.coor = [[a0, b0], [a1, b1]];\r\n                    } else {\r\n                        this.emit('warn', `Width cannot be less than ${this.MIN_WIDTH},Height cannot be less than${this.MIN_HEIGHT}。`);\r\n                    }\r\n                } else if ([Shape.Polygon, Shape.Line].includes(this.activeShape.type)) {\r\n                    const nx = Math.round(offsetX - this.originX / this.scale);\r\n                    const ny = Math.round(offsetY - this.originY / this.scale);\r\n                    const newPoint = [nx, ny];\r\n                    this.activeShape.coor.splice(this.ctrlIndex, 1, newPoint);\r\n                } else if (this.activeShape.type === Shape.Circle) {\r\n                    const nx = Math.round(offsetX - this.originX / this.scale);\r\n                    const newRadius = nx - this.activeShape.coor[0];\r\n                    if (newRadius >= this.MIN_RADIUS) this.activeShape.radius = newRadius;\r\n                }\r\n            } else if (this.activeShape.dragging && !this.readonly) { // 拖拽\r\n                let coor = [];\r\n                let noLimit = true;\r\n                const w = this.IMAGE_ORIGIN_WIDTH || this.WIDTH;\r\n                const h = this.IMAGE_ORIGIN_HEIGHT || this.HEIGHT;\r\n                if ([Shape.Dot, Shape.Circle].includes(this.activeShape.type)) {\r\n                    const [t1, t2] = this.remmber[0];\r\n                    const x = offsetX - t1;\r\n                    const y = offsetY - t2;\r\n                    if (x < 0 || x > w || y < 0 || y > h) noLimit = false;\r\n                    coor = [x, y];\r\n                } else {\r\n                    for (let i = 0; i < this.activeShape.coor.length; i++) {\r\n                        const tar = this.remmber[i];\r\n                        const x = offsetX - tar[0];\r\n                        const y = offsetY - tar[1];\r\n                        if (x < 0 || x > w || y < 0 || y > h) noLimit = false;\r\n                        coor.push([x, y]);\r\n                    }\r\n                }\r\n                if (noLimit) this.activeShape.coor = coor;\r\n            } else if (this.activeShape.creating && this.isInBackground(e)) {\r\n                const x = Math.round(offsetX - this.originX / this.scale);\r\n                const y = Math.round(offsetY - this.originY / this.scale);\r\n                // 创建矩形\r\n                if (this.activeShape.type === Shape.Rect) {\r\n                    this.activeShape.coor.splice(1, 1, [x, y]);\r\n                } else if (this.activeShape.type === Shape.Circle) {\r\n                    const [x0, y0] = this.activeShape.coor;\r\n                    const r = Math.sqrt((x0 - x) ** 2 + (y0 - y) ** 2);\r\n                    this.activeShape.radius = r;\r\n                }\r\n            }\r\n            this.update();\r\n        } else if ([Shape.Polygon, Shape.Line].includes(this.activeShape.type) && this.activeShape.creating) {\r\n            // 多边形添加点\r\n            this.update();\r\n        } else if ((!this.isMobile && (e as MouseEvent).buttons === 2 && (e as MouseEvent).which === 3) || (this.isMobile && (e as TouchEvent).touches.length === 1 && !this.isTouch2)) {\r\n            // 拖动背景\r\n            this.originX = Math.round(mouseX - this.remmberOrigin[0]);\r\n            this.originY = Math.round(mouseY - this.remmberOrigin[1]);\r\n            this.update();\r\n        } else if (this.isMobile && (e as TouchEvent).touches.length === 2) {\r\n            this.isTouch2 = true;\r\n            const touch0 = (e as TouchEvent).touches[0];\r\n            const touch1 = (e as TouchEvent).touches[1];\r\n            const cur = this.scaleTouchStore;\r\n            this.scaleTouchStore = Math.abs((touch1.clientX - touch0.clientX) * (touch1.clientY - touch0.clientY));\r\n            this.setScale(this.scaleTouchStore > cur, true);\r\n        }\r\n    }\r\n\r\n    private handleMouseUp(e: MouseEvent | TouchEvent) {\r\n        e.stopPropagation();\r\n        this.evt = e;\r\n        if (this.lock) return;\r\n        if (this.isMobile) {\r\n            if ((e as TouchEvent).touches.length === 0) {\r\n                this.isTouch2 = false;\r\n            }\r\n            if ((Date.now() - this.dblTouchStore) < this.dblTouch) {\r\n                this.handleDblclick(e);\r\n                return;\r\n            }\r\n            this.dblTouchStore = Date.now();\r\n        }\r\n        this.remmber = [];\r\n        if (this.activeShape.type !== Shape.None && !this.ctrlKey) {\r\n            this.activeShape.dragging = false;\r\n            if (this.activeShape.creating) {\r\n                if (this.activeShape.type === Shape.Rect) {\r\n                    const [[x0, y0], [x1, y1]] = this.activeShape.coor;\r\n                    if (Math.abs(x0 - x1) < this.MIN_WIDTH || Math.abs(y0 - y1) < this.MIN_HEIGHT) {\r\n                        this.dataset.pop();\r\n                        this.emit('warn', `Width cannot be less than ${this.MIN_WIDTH},Height cannot be less than ${this.MIN_HEIGHT}`);\r\n                    } else {\r\n                        this.activeShape.coor = [[Math.min(x0, x1), Math.min(y0, y1)], [Math.max(x0, x1), Math.max(y0, y1)]];\r\n                        this.activeShape.creating = false;\r\n                        this.emit('add', this.activeShape);\r\n                    }\r\n                } else if (this.activeShape.type === Shape.Circle) {\r\n                    if (this.activeShape.radius < this.MIN_RADIUS) {\r\n                        this.dataset.pop();\r\n                        this.emit('warn', `Radius cannot be less than ${this.MIN_WIDTH}`);\r\n                    } else {\r\n                        this.activeShape.creating = false;\r\n                        this.emit('add', this.activeShape);\r\n                    }\r\n                }\r\n                this.update();\r\n            }\r\n        }\r\n    }\r\n\r\n    private handleDblclick(e: MouseEvent | TouchEvent) {\r\n        e.stopPropagation();\r\n        this.evt = e;\r\n        if (this.lock) return;\r\n        if ([Shape.Polygon, Shape.Line].includes(this.activeShape.type)) {\r\n            const canPolygon = this.activeShape.type === Shape.Polygon && this.activeShape.coor.length > 2\r\n            const canLine = this.activeShape.type === Shape.Line && this.activeShape.coor.length > 1\r\n            if (canPolygon || canLine) {\r\n                this.emit('add', this.activeShape);\r\n                this.activeShape.creating = false;\r\n                this.update();\r\n            }\r\n        }\r\n    }\r\n    private handleKeydown(e: KeyboardEvent) {\r\n        if (e.key === 'Control') {\r\n            this.ctrlKey = true;\r\n        }\r\n    }\r\n\r\n    private handleKeyup(e: KeyboardEvent) {\r\n        if (e.key === 'Control') {\r\n            this.ctrlKey = false;\r\n        }\r\n        this.evt = e;\r\n        if (this.lock || this.readonly) return;\r\n        if (this.activeShape.type) {\r\n            if ([Shape.Polygon, Shape.Line].includes(this.activeShape.type) && e.key === 'Escape') {\r\n                if (this.activeShape.coor.length > 1 && this.activeShape.creating) {\r\n                    this.activeShape.coor.pop();\r\n                } else {\r\n                    this.deleteByIndex(this.activeShape.index);\r\n                }\r\n                this.update();\r\n            } else if (e.key === 'Delete') {\r\n                this.deleteByIndex(this.activeShape.index);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** 初始化配置 */\r\n    initSetting() {\r\n        const dpr = window.devicePixelRatio || 1;\r\n        this.canvas.style.userSelect = 'none';\r\n        this.ctx = this.ctx || this.canvas.getContext('2d', { alpha: this.alpha });\r\n        this.WIDTH = Math.round(this.canvas.clientWidth);\r\n        this.HEIGHT = Math.round(this.canvas.clientHeight);\r\n        this.canvas.width = this.WIDTH * dpr;\r\n        this.canvas.height = this.HEIGHT * dpr;\r\n        this.canvas.style.width = this.WIDTH + 'px';\r\n        this.canvas.style.height = this.HEIGHT + 'px';\r\n        this.offScreen.width = this.WIDTH;\r\n        this.offScreen.height = this.HEIGHT;\r\n        this.offScreenCtx = this.offScreenCtx || this.offScreen.getContext('2d', { willReadFrequently: true });\r\n        this.ctx.scale(dpr, dpr);\r\n    }\r\n\r\n    /** 初始化事件 */\r\n    initEvents() {\r\n        this.image.addEventListener('load', this.handleLoad);\r\n        this.canvas.addEventListener('touchstart', this.handleMouseDown);\r\n        this.canvas.addEventListener('touchmove', this.handleMouseMove);\r\n        this.canvas.addEventListener('touchend', this.handleMouseUp);\r\n        this.canvas.addEventListener('contextmenu', this.handleContextmenu);\r\n        this.canvas.addEventListener('mousewheel', this.handleMousewheel);\r\n        this.canvas.addEventListener('mousedown', this.handleMouseDown);\r\n        this.canvas.addEventListener('mousemove', this.handleMouseMove);\r\n        this.canvas.addEventListener('mouseup', this.handleMouseUp);\r\n        this.canvas.addEventListener('dblclick', this.handleDblclick);\r\n        document.body.addEventListener('keydown', this.handleKeydown, true);\r\n        document.body.addEventListener('keyup', this.handleKeyup, true);\r\n    }\r\n\r\n    /**\r\n     * 添加/切换图片\r\n     * @param url 图片链接\r\n     */\r\n    setImage(url: string) {\r\n        this.image.src = url;\r\n    }\r\n\r\n    /**\r\n     * 设置数据\r\n     * @param data Array\r\n     */\r\n    setData(data: AllShape[]) {\r\n        setTimeout(() => {\r\n            const initdata: AllShape[] = [];\r\n            data.forEach((item, index) => {\r\n                if (Object.prototype.toString.call(item).includes('Object')) {\r\n                    let shape: AllShape;\r\n                    switch (item.type) {\r\n                        case Shape.Rect:\r\n                            shape = new Rect(item, index);\r\n                            break;\r\n                        case Shape.Polygon:\r\n                            shape = new Polygon(item, index);\r\n                            break;\r\n                        case Shape.Dot:\r\n                            shape = new Dot(item, index);\r\n                            break;\r\n                        case Shape.Line:\r\n                            shape = new Line(item, index);\r\n                            break;\r\n                        case Shape.Circle:\r\n                            shape = new Circle(item, index);\r\n                            break;\r\n                        default:\r\n                            shape = new Rect(item, index);\r\n                            console.warn('Invalid shape', item);\r\n                            break;\r\n                    }\r\n                    [Shape.Rect, Shape.Polygon, Shape.Dot, Shape.Line, Shape.Circle].includes(item.type) && initdata.push(shape);\r\n                } else {\r\n                    console.warn('Shape must be an enumerable Object.', item);\r\n                }\r\n            });\r\n            this.dataset = initdata;\r\n            this.update();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 判断是否在标注实例上\r\n     * @param mousePoint 点击位置\r\n     * @returns\r\n     */\r\n    hitOnShape(mousePoint: Point): [number, AllShape] {\r\n        let hitShapeIndex = -1;\r\n        let hitShape: AllShape | any;\r\n        for (let i = this.dataset.length - 1; i > -1; i--) {\r\n            const shape = this.dataset[i];\r\n            if (\r\n                (shape.type === Shape.Dot && this.isPointInCircle(mousePoint, shape.coor as Point, this.ctrlRadius)) ||\r\n                (shape.type === Shape.Circle && this.isPointInCircle(mousePoint, shape.coor as Point, (shape as Circle).radius * this.scale)) ||\r\n                (shape.type === Shape.Rect && this.isPointInRect(mousePoint, (shape as Rect).coor)) ||\r\n                (shape.type === Shape.Polygon && this.isPointInPolygon(mousePoint, (shape as Polygon).coor)) ||\r\n                (shape.type === Shape.Line && this.isPointInLine(mousePoint, (shape as Line).coor))\r\n            ) {\r\n                if (this.focusMode && !shape.active) continue;\r\n                hitShapeIndex = i;\r\n                hitShape = shape;\r\n                break;\r\n            }\r\n        }\r\n        return [hitShapeIndex, hitShape];\r\n    }\r\n\r\n    /**\r\n     * 判断鼠标是否在背景图内部\r\n     * @param e MouseEvent\r\n     * @returns 布尔值\r\n     */\r\n    isInBackground(e: MouseEvent | TouchEvent): boolean {\r\n        const { mouseX, mouseY } = this.mergeEvent(e);\r\n        return mouseX >= this.originX &&\r\n            mouseY >= this.originY &&\r\n            mouseX <= this.originX + this.IMAGE_ORIGIN_WIDTH * this.scale &&\r\n            mouseY <= this.originY + this.IMAGE_ORIGIN_HEIGHT * this.scale;\r\n    }\r\n\r\n    /**\r\n     * 判断是否在矩形内\r\n     * @param point 坐标\r\n     * @param coor 区域坐标\r\n     * @returns 布尔值\r\n     */\r\n    isPointInRect(point: Point, coor: Point[]): boolean {\r\n        const [x, y] = point;\r\n        const [[x0, y0], [x1, y1]] = coor.map((a) => a.map((b) => b * this.scale));\r\n        return x0 + this.originX <= x &&\r\n            x <= x1 + this.originX &&\r\n            y0 + this.originY <= y &&\r\n            y <= y1 + this.originY;\r\n    }\r\n\r\n    /**\r\n     * 判断是否在多边形内\r\n     * @param point 坐标\r\n     * @param coor 区域坐标\r\n     * @returns 布尔值\r\n     */\r\n    isPointInPolygon(point: Point, coor: Point[]): boolean {\r\n        this.offScreenCtx.save();\r\n        this.offScreenCtx.clearRect(0, 0, this.WIDTH, this.HEIGHT);\r\n        this.offScreenCtx.translate(this.originX, this.originY);\r\n        this.offScreenCtx.beginPath();\r\n        coor.forEach((pt, i) => {\r\n            const [x, y] = pt.map((a) => Math.round(a * this.scale));\r\n            if (i === 0) {\r\n                this.offScreenCtx.moveTo(x, y);\r\n            } else {\r\n                this.offScreenCtx.lineTo(x, y);\r\n            }\r\n        });\r\n        this.offScreenCtx.closePath();\r\n        this.offScreenCtx.fill();\r\n        const areaData = this.offScreenCtx.getImageData(0, 0, this.WIDTH, this.HEIGHT);\r\n        const index = (point[1] - 1) * this.WIDTH * 4 + point[0] * 4;\r\n        this.offScreenCtx.restore();\r\n        return areaData.data[index + 3] !== 0;\r\n    }\r\n\r\n    /**\r\n     * 判断是否在圆内\r\n     * @param point 坐标\r\n     * @param center 圆心\r\n     * @param r 半径\r\n     * @param needScale 是否为圆形点击检测\r\n     * @returns 布尔值\r\n     */\r\n    isPointInCircle(point: Point, center: Point, r: number): boolean {\r\n        const [x, y] = point;\r\n        const [x0, y0] = center.map((a) => a * this.scale);\r\n        const distance = Math.sqrt((x0 + this.originX - x) ** 2 + (y0 + this.originY - y) ** 2);\r\n        return distance <= r;\r\n    }\r\n\r\n    /**\r\n     * 判断是否在折线内\r\n     * @param point 坐标\r\n     * @param coor 区域坐标\r\n     * @returns 布尔值\r\n     */\r\n    isPointInLine(point: Point, coor: Point[]): boolean {\r\n        this.offScreenCtx.save();\r\n        this.offScreenCtx.clearRect(0, 0, this.WIDTH, this.HEIGHT);\r\n        this.offScreenCtx.translate(this.originX, this.originY);\r\n        this.offScreenCtx.lineWidth = 5;\r\n        this.offScreenCtx.beginPath();\r\n        coor.forEach((pt, i) => {\r\n            const [x, y] = pt.map((a) => Math.round(a * this.scale));\r\n            if (i === 0) {\r\n                this.offScreenCtx.moveTo(x, y);\r\n            } else {\r\n                this.offScreenCtx.lineTo(x, y);\r\n            }\r\n        });\r\n        this.offScreenCtx.stroke();\r\n        const areaData = this.offScreenCtx.getImageData(0, 0, this.WIDTH, this.HEIGHT);\r\n        const index = (point[1] - 1) * this.WIDTH * 4 + point[0] * 4;\r\n        this.offScreenCtx.restore();\r\n        return areaData.data[index + 3] !== 0;\r\n    }\r\n\r\n    /**\r\n       * 判断是图形是否属于嵌套关系 (目前只支持矩形和多边形)\r\n       * @param shape1 标注实例\r\n       * @param shape2 标注实例\r\n       * @returns 布尔值\r\n       */\r\n    isNested(shape1: Rect | Polygon, shape2: Rect | Polygon): boolean {\r\n        return isNested(shape1, shape2);\r\n    }\r\n\r\n    /**\r\n     * 绘制矩形\r\n     * @param shape 标注实例\r\n     * @returns\r\n     */\r\n    drawRect(shape: Rect) {\r\n        if (shape.coor.length !== 2) return;\r\n        const { strokeStyle, fillStyle, active, creating, coor, lineWidth } = shape;\r\n        const [[x0, y0], [x1, y1]] = coor.map((a: Point) => a.map((b) => Math.round(b * this.scale)));\r\n        this.ctx.save();\r\n        this.ctx.lineWidth = lineWidth || this.lineWidth;\r\n        this.ctx.fillStyle = fillStyle || this.fillStyle;\r\n        this.ctx.strokeStyle = (active || creating) ? this.activeStrokeStyle : (strokeStyle || this.strokeStyle);\r\n        const w = x1 - x0;\r\n        const h = y1 - y0;\r\n        if (!creating) this.ctx.fillRect(x0, y0, w, h);\r\n        this.ctx.strokeRect(x0, y0, w, h);\r\n        this.ctx.restore();\r\n        this.drawLabel(coor[0], shape);\r\n    }\r\n\r\n    /**\r\n     * 绘制多边形\r\n     * @param shape 标注实例\r\n     */\r\n    drawPolygon(shape: Polygon) {\r\n        const { strokeStyle, fillStyle, active, creating, coor, lineWidth } = shape;\r\n        this.ctx.save();\r\n        this.ctx.lineJoin = 'round';\r\n        this.ctx.lineWidth = lineWidth || this.lineWidth;\r\n        this.ctx.fillStyle = fillStyle || this.fillStyle;\r\n        this.ctx.strokeStyle = (active || creating) ? this.activeStrokeStyle : (strokeStyle || this.strokeStyle);\r\n        this.ctx.beginPath();\r\n        coor.forEach((el: Point, i) => {\r\n            const [x, y] = el.map((a) => Math.round(a * this.scale));\r\n            if (i === 0) {\r\n                this.ctx.moveTo(x, y);\r\n            } else {\r\n                this.ctx.lineTo(x, y);\r\n            }\r\n        });\r\n        if (creating) {\r\n            const [x, y] = this.mouse || [];\r\n            this.ctx.lineTo(x - this.originX, y - this.originY);\r\n        } else if (coor.length > 2) {\r\n            this.ctx.closePath();\r\n        }\r\n        this.ctx.fill();\r\n        this.ctx.stroke();\r\n        this.ctx.restore();\r\n        this.drawLabel(coor[0], shape);\r\n    }\r\n\r\n    /**\r\n     * 绘制点\r\n     * @param shape 标注实例\r\n     */\r\n    drawDot(shape: Dot) {\r\n        const { strokeStyle, fillStyle, active, coor, lineWidth } = shape;\r\n        const [x, y] = coor.map((a) => a * this.scale);\r\n        this.ctx.save();\r\n        this.ctx.lineWidth = lineWidth || this.lineWidth;\r\n        this.ctx.fillStyle = fillStyle || this.ctrlFillStyle;\r\n        this.ctx.strokeStyle = active ? this.activeStrokeStyle : (strokeStyle || this.strokeStyle);\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(x, y, this.ctrlRadius, 0, 2 * Math.PI, true);\r\n        this.ctx.fill();\r\n        this.ctx.arc(x, y, this.ctrlRadius, 0, 2 * Math.PI, true);\r\n        this.ctx.stroke();\r\n        this.ctx.restore();\r\n        this.drawLabel(coor as Point, shape);\r\n    }\r\n\r\n    /**\r\n     * 绘制圆\r\n     * @param shape 标注实例\r\n     */\r\n    drawCirle(shape: Circle) {\r\n        const { strokeStyle, fillStyle, active, coor, creating, radius, ctrlsData, lineWidth } = shape;\r\n        const [x, y] = coor.map((a) => a * this.scale);\r\n        this.ctx.save();\r\n        this.ctx.lineWidth = lineWidth || this.lineWidth;\r\n        this.ctx.fillStyle = fillStyle || this.fillStyle;\r\n        this.ctx.strokeStyle = (active || creating) ? this.activeStrokeStyle : (strokeStyle || this.strokeStyle);\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(x, y, radius * this.scale, 0, 2 * Math.PI, true);\r\n        this.ctx.fill();\r\n        this.ctx.arc(x, y, radius * this.scale, 0, 2 * Math.PI, true);\r\n        this.ctx.stroke();\r\n        this.ctx.restore();\r\n        this.drawLabel(ctrlsData[0] as Point, shape);\r\n    }\r\n\r\n    /**\r\n     * 绘制折线\r\n     * @param shape 标注实例\r\n     */\r\n    drawLine(shape: Line) {\r\n        const { strokeStyle, active, creating, coor, lineWidth } = shape;\r\n        this.ctx.save();\r\n        this.ctx.lineJoin = 'round';\r\n        this.ctx.lineWidth = lineWidth || this.lineWidth;\r\n        this.ctx.strokeStyle = (active || creating) ? this.activeStrokeStyle : (strokeStyle || this.strokeStyle);\r\n        this.ctx.beginPath();\r\n        coor.forEach((el: Point, i) => {\r\n            const [x, y] = el.map((a) => Math.round(a * this.scale));\r\n            if (i === 0) {\r\n                this.ctx.moveTo(x, y);\r\n            } else {\r\n                this.ctx.lineTo(x, y);\r\n            }\r\n        });\r\n        if (creating) {\r\n            const [x, y] = this.mouse || [];\r\n            this.ctx.lineTo(x - this.originX, y - this.originY);\r\n        }\r\n        this.ctx.stroke();\r\n        this.ctx.restore();\r\n        this.drawLabel(coor[0], shape);\r\n    }\r\n\r\n    /**\r\n     * 绘制控制点\r\n     * @param point 坐标\r\n     */\r\n    drawCtrl(point: Point) {\r\n        const [x, y] = point.map((a) => a * this.scale);\r\n        this.ctx.save();\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = this.ctrlFillStyle;\r\n        this.ctx.strokeStyle = this.ctrlStrokeStyle;\r\n        this.ctx.arc(x, y, this.ctrlRadius, 0, 2 * Math.PI, true);\r\n        this.ctx.fill();\r\n        this.ctx.arc(x, y, this.ctrlRadius, 0, 2 * Math.PI, true);\r\n        this.ctx.stroke();\r\n        this.ctx.restore();\r\n    }\r\n\r\n    /**\r\n     * 绘制控制点列表\r\n     * @param shape 标注实例\r\n     */\r\n    drawCtrlList(shape: Rect | Polygon | Line) {\r\n        shape.ctrlsData.forEach((point, i) => {\r\n            if (shape.type === Shape.Circle) {\r\n                if (i === 1) this.drawCtrl(point);\r\n            } else {\r\n                this.drawCtrl(point);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 绘制label\r\n     * @param point 位置\r\n     * @param label 文本\r\n     */\r\n    drawLabel(point: Point, shape: AllShape) {\r\n        const { label = '', labelFillStyle = '', labelFont = '', textFillStyle = '', hideLabel, labelUp, lineWidth } = shape;\r\n        const isHideLabel = typeof hideLabel === 'boolean' ? hideLabel : this.hideLabel;\r\n        const isLabelUp = typeof labelUp === 'boolean' ? labelUp : this.labelUp;\r\n        const currLineWidth = lineWidth || this.lineWidth;\r\n\r\n        if (label.length && !isHideLabel) {\r\n            this.ctx.font = labelFont || this.labelFont;\r\n            const textPaddingLeft = 4;\r\n            const textPaddingTop = 4;\r\n            const newText = label.length < this.labelMaxLen + 1 ? label : `${label.slice(0, this.labelMaxLen)}...`;\r\n            const text = this.ctx.measureText(newText);\r\n            const font = parseInt(this.ctx.font) - 4;\r\n            const labelWidth = text.width + textPaddingLeft * 2;\r\n            const labelHeight = font + textPaddingTop * 2;\r\n            const [x, y] = point.map((a) => a * this.scale);\r\n            const toleft = (this.IMAGE_ORIGIN_WIDTH - point[0]) < labelWidth / this.scale;\r\n            const toTop = (this.IMAGE_ORIGIN_HEIGHT - point[1]) < labelHeight / this.scale;\r\n            const toTop2 = point[1] > labelHeight / this.scale;\r\n            const isup = isLabelUp ? toTop2 : toTop;\r\n            this.ctx.save();\r\n            this.ctx.fillStyle = labelFillStyle || this.labelFillStyle;\r\n            this.ctx.fillRect(toleft ? (x - text.width - textPaddingLeft - currLineWidth / 2) : (x + currLineWidth / 2), isup ? (y - labelHeight - currLineWidth / 2) : (y + currLineWidth / 2), labelWidth, labelHeight);\r\n            this.ctx.fillStyle = textFillStyle || this.textFillStyle;\r\n            this.ctx.fillText(newText, toleft ? (x - text.width) : (x + textPaddingLeft + currLineWidth / 2), isup ? (y - labelHeight + font + textPaddingTop) : (y + font + textPaddingTop + currLineWidth / 2), 180);\r\n            this.ctx.restore();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新画布\r\n     */\r\n    update() {\r\n        window.cancelAnimationFrame(this.timer);\r\n        this.timer = window.requestAnimationFrame(() => {\r\n            this.ctx.save();\r\n            this.ctx.clearRect(0, 0, this.WIDTH, this.HEIGHT);\r\n            this.ctx.translate(this.originX, this.originY);\r\n            if (this.IMAGE_WIDTH && this.IMAGE_HEIGHT) {\r\n                this.ctx.drawImage(this.image, 0, 0, this.IMAGE_WIDTH, this.IMAGE_HEIGHT);\r\n            }\r\n            const renderList = this.focusMode ? (this.activeShape.type ? [this.activeShape] : []) : this.dataset;\r\n            for (let i = 0; i < renderList.length; i++) {\r\n                const shape = renderList[i];\r\n                if (shape.hide) continue;\r\n                switch (shape.type) {\r\n                    case Shape.Rect:\r\n                        this.drawRect(shape as Rect);\r\n                        break;\r\n                    case Shape.Polygon:\r\n                        this.drawPolygon(shape as Polygon);\r\n                        break;\r\n                    case Shape.Dot:\r\n                        this.drawDot(shape as Dot);\r\n                        break;\r\n                    case Shape.Line:\r\n                        this.drawLine(shape as Line);\r\n                        break;\r\n                    case Shape.Circle:\r\n                        this.drawCirle(shape as Circle);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n            if ([Shape.Rect, Shape.Polygon, Shape.Line, Shape.Circle].includes(this.activeShape.type) && !this.activeShape.hide) {\r\n                this.drawCtrlList(this.activeShape);\r\n            }\r\n            this.ctx.restore();\r\n            this.emit('updated', this.dataset);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 删除指定矩形\r\n     * @param index number\r\n     */\r\n    deleteByIndex(index: number) {\r\n        const num = this.dataset.findIndex((x) => x.index === index);\r\n        if (num > -1) {\r\n            this.emit('delete', this.dataset[num]);\r\n            this.dataset.splice(num, 1);\r\n            this.dataset.forEach((item, i) => { item.index = i; });\r\n            this.update();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 计算缩放步长\r\n     */\r\n    calcStep(flag = '') {\r\n        if (this.IMAGE_WIDTH < this.WIDTH && this.IMAGE_HEIGHT < this.HEIGHT) {\r\n            if (flag === '' || flag === 'b') {\r\n                this.setScale(true, false, true);\r\n                this.calcStep('b');\r\n            }\r\n        }\r\n        if (this.IMAGE_WIDTH > this.WIDTH || this.IMAGE_HEIGHT > this.HEIGHT) {\r\n            if (flag === '' || flag === 's') {\r\n                this.setScale(false, false, true);\r\n                this.calcStep('s');\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 缩放\r\n     * @param type true放大5%，false缩小5%\r\n     * @param center 缩放中心 center|mouse\r\n     * @param pure 不绘制\r\n     */\r\n    setScale(type: boolean, byMouse = false, pure = false) {\r\n        if (this.lock) return;\r\n        if ((!type && this.imageMin < 20) || (type && this.IMAGE_WIDTH > this.imageOriginMax * 100)) return;\r\n        if (type) { this.scaleStep++; } else { this.scaleStep--; }\r\n        let realToLeft = 0;\r\n        let realToRight = 0;\r\n        const [x, y] = this.mouse || [];\r\n        if (byMouse) {\r\n            realToLeft = (x - this.originX) / this.scale;\r\n            realToRight = (y - this.originY) / this.scale;\r\n        }\r\n        const abs = Math.abs(this.scaleStep);\r\n        const width = this.IMAGE_WIDTH;\r\n        this.IMAGE_WIDTH = Math.round(this.IMAGE_ORIGIN_WIDTH * (this.scaleStep >= 0 ? 1.05 : 0.95) ** abs);\r\n        this.IMAGE_HEIGHT = Math.round(this.IMAGE_ORIGIN_HEIGHT * (this.scaleStep >= 0 ? 1.05 : 0.95) ** abs);\r\n        if (byMouse) {\r\n            this.originX = x - realToLeft * this.scale;\r\n            this.originY = y - realToRight * this.scale;\r\n        } else {\r\n            const scale = this.IMAGE_WIDTH / width;\r\n            this.originX = this.WIDTH / 2 - (this.WIDTH / 2 - this.originX) * scale;\r\n            this.originY = this.HEIGHT / 2 - (this.HEIGHT / 2 - this.originY) * scale;\r\n        }\r\n        if (!pure) {\r\n            this.update();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 适配背景图\r\n     */\r\n    fitZoom() {\r\n        this.calcStep();\r\n        if (this.IMAGE_HEIGHT / this.IMAGE_WIDTH >= this.HEIGHT / this.WIDTH) {\r\n            this.IMAGE_WIDTH = this.IMAGE_ORIGIN_WIDTH / (this.IMAGE_ORIGIN_HEIGHT / this.HEIGHT);\r\n            this.IMAGE_HEIGHT = this.HEIGHT;\r\n        } else {\r\n            this.IMAGE_WIDTH = this.WIDTH;\r\n            this.IMAGE_HEIGHT = this.IMAGE_ORIGIN_HEIGHT / (this.IMAGE_ORIGIN_WIDTH / this.WIDTH);\r\n        }\r\n        this.originX = (this.WIDTH - this.IMAGE_WIDTH) / 2;\r\n        this.originY = (this.HEIGHT - this.IMAGE_HEIGHT) / 2;\r\n        this.update();\r\n    }\r\n\r\n    /**\r\n     * 设置专注模式\r\n     * @param type {boolean}\r\n     */\r\n    setFocusMode(type: boolean) {\r\n        this.focusMode = type;\r\n        this.update();\r\n    }\r\n\r\n    /**\r\n     * 销毁\r\n     */\r\n    destroy() {\r\n        this.image.removeEventListener('load', this.handleLoad);\r\n        this.canvas.removeEventListener('contextmenu', this.handleContextmenu);\r\n        this.canvas.removeEventListener('mousewheel', this.handleMousewheel);\r\n        this.canvas.removeEventListener('mousedown', this.handleMouseDown);\r\n        this.canvas.removeEventListener('touchend', this.handleMouseDown);\r\n        this.canvas.removeEventListener('mousemove', this.handleMouseMove);\r\n        this.canvas.removeEventListener('touchmove', this.handleMouseMove);\r\n        this.canvas.removeEventListener('mouseup', this.handleMouseUp);\r\n        this.canvas.removeEventListener('touchend', this.handleMouseUp);\r\n        this.canvas.removeEventListener('dblclick', this.handleDblclick);\r\n        document.body.removeEventListener('keydown', this.handleKeydown, true);\r\n        document.body.removeEventListener('keyup', this.handleKeyup, true);\r\n        this.canvas.width = this.WIDTH;\r\n        this.canvas.height = this.HEIGHT;\r\n        this.canvas.style.width = null;\r\n        this.canvas.style.height = null;\r\n        this.canvas.style.userSelect = null;\r\n    }\r\n\r\n    /**\r\n     * 重新设置画布大小\r\n     */\r\n    resize() {\r\n        this.canvas.width = null;\r\n        this.canvas.height = null;\r\n        this.canvas.style.width = null;\r\n        this.canvas.style.height = null;\r\n        this.initSetting();\r\n        this.update();\r\n    }\r\n}"],"names":["isPointInPolygon","x","y","vertices","inside","n","length","i","j","xi","yi","xj","yj","Shape$1","constructor","item","index","this","label","hideLabel","coor","strokeStyle","fillStyle","lineWidth","labelFillStyle","textFillStyle","labelFont","type","active","creating","dragging","uuid","s","hexDigits","m","Math","floor","random","slice","join","createUuid","labelUp","Object","assign","Rect","Shape","super","ctrlsData","x0","y0","x1","y1","Polygon","Dot","EventBus","_eventTree","on","eventName","cb","fns","Array","isArray","push","emit","payload","forEach","fn","off","find","splice","Line","Circle","radius","el","src","lock","readonly","MIN_WIDTH","MIN_HEIGHT","MIN_RADIUS","activeStrokeStyle","activeFillStyle","ctrlStrokeStyle","ctrlFillStyle","ctrlRadius","labelMaxLen","WIDTH","HEIGHT","dataset","remmber","mouse","remmberOrigin","createType","None","ctrlIndex","image","Image","IMAGE_ORIGIN_WIDTH","IMAGE_WIDTH","IMAGE_ORIGIN_HEIGHT","IMAGE_HEIGHT","originX","originY","scaleStep","scrollZoom","dblTouch","dblTouchStore","alpha","focusMode","evt","scaleTouchStore","isTouch2","isMobile","navigator","userAgent","includes","ctrlKey","handleLoad","bind","handleContextmenu","handleMousewheel","handleMouseDown","handleMouseMove","handleMouseUp","handleDblclick","handleKeyup","handleKeydown","container","document","querySelector","HTMLCanvasElement","canvas","offScreen","createElement","initSetting","initEvents","setImage","console","warn","activeShape","scale","imageMin","min","imageOriginMax","max","mergeEvent","e","mouseX","mouseY","mouseCX","mouseCY","clientX","clientY","touches","target","left","top","getBoundingClientRect","round","clientX1","clientY1","abs","offsetX","offsetY","width","height","fitZoom","preventDefault","stopPropagation","setScale","deltaY","buttons","ctrls","findIndex","isPointInCircle","isInBackground","nx","ny","hitShapeIndex","hitShape","hitOnShape","pt","sort","a","b","newShape","curPoint","sp","update","a0","b0","a1","b1","newPoint","newRadius","noLimit","w","h","t1","t2","tar","r","sqrt","pow","which","touch0","touch1","cur","Date","now","pop","canPolygon","canLine","key","deleteByIndex","dpr","window","devicePixelRatio","style","userSelect","ctx","getContext","clientWidth","clientHeight","offScreenCtx","willReadFrequently","addEventListener","body","url","setData","data","setTimeout","initdata","prototype","toString","call","shape","mousePoint","isPointInRect","isPointInLine","point","map","save","clearRect","translate","beginPath","moveTo","lineTo","closePath","fill","areaData","getImageData","restore","center","stroke","isNested","shape1","shape2","x2","y2","x3","y3","x4","y4","vertices1","vertices2","drawRect","fillRect","strokeRect","drawLabel","drawPolygon","lineJoin","drawDot","arc","PI","drawCirle","drawLine","drawCtrl","drawCtrlList","isHideLabel","isLabelUp","currLineWidth","font","textPaddingLeft","textPaddingTop","newText","text","measureText","parseInt","labelWidth","labelHeight","toleft","toTop","toTop2","isup","fillText","cancelAnimationFrame","timer","requestAnimationFrame","drawImage","renderList","hide","num","calcStep","flag","byMouse","pure","realToLeft","realToRight","setFocusMode","destroy","removeEventListener","resize"],"mappings":"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"}