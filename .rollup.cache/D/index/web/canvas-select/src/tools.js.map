{"version":3,"file":"tools.js","sourceRoot":"","sources":["tools.ts"],"names":[],"mappings":"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","sourcesContent":["export function createUuid(): string {\r\n  const s: any[] = [];\r\n  const hexDigits = \"0123456789abcdef\";\r\n  for (let i = 0; i < 36; i++) {\r\n    const m = Math.floor(Math.random() * 0x10);\r\n    s[i] = hexDigits.slice(m, m + 1);\r\n  }\r\n  s[14] = \"4\";\r\n  const n = (s[19] & 0x3) | 0x8;\r\n  s[19] = hexDigits.slice(n, n + 1);\r\n  s[8] = s[13] = s[18] = s[23] = \"-\";\r\n  const uuid = s.join(\"\");\r\n  return uuid;\r\n}\r\n\r\n/**\r\n * 判断图形是否符合嵌套关系, 业务需求：只需要判断shape2所有的点是否都在shape1内部即可\r\n * @param shape1 参数1\r\n * @param shape2 参数2\r\n * @reutrn Boolean 符合条件返回true 否则返回false\r\n */\r\n\r\nexport function isNested(shape1: any, shape2: any): boolean {\r\n  if (shape1.type === 1 && shape2.type === 1) {\r\n    // 矩形和矩形的判断逻辑\r\n    const [[x1, y1], [x2, y2]] = shape1.coor;\r\n    const [[x3, y3], [x4, y4]] = shape2.coor;\r\n\r\n    // if (x1 >= x3 && y1 >= y3 && x2 <= x4 && y2 <= y4) {\r\n    //   return true; // shape1 嵌套在 shape2 内部\r\n    // } else\r\n    if (x1 <= x3 && y1 <= y3 && x2 >= x4 && y2 >= y4) {\r\n      return true; // shape2 嵌套在 shape1 内部\r\n    } else {\r\n      return false; // 两个矩形没有嵌套关系\r\n    }\r\n  } else if (shape1.type === 1 && shape2.type === 2) {\r\n    // 矩形和多边形的判断逻辑，确保多边形所有的坐标点都在矩形里面\r\n    const [[x1, y1], [x2, y2]] = shape1.coor;\r\n    const vertices = shape2.coor;\r\n\r\n    for (let i = 0; i < vertices.length; i++) {\r\n      const [x, y] = vertices[i];\r\n      if (x < x1 || x > x2 || y < y1 || y > y2) {\r\n        return false; // 多边形的顶点在矩形外部，不嵌套\r\n      }\r\n    }\r\n\r\n    return true; // 所有顶点都在矩形内部，嵌套关系成立\r\n  } else if (shape1.type === 2 && shape2.type === 1) {\r\n    // 多边形和矩形的判断逻辑，确保矩形的所有坐标点都在多边形里面\r\n    const vertices = shape2.coor; // 矩形的顶点坐标\r\n\r\n    for (let i = 0; i < vertices.length; i++) {\r\n      const [x, y] = vertices[i];\r\n      if (!isPointInPolygon(x, y, shape1.coor)) {\r\n        return false; // 有一个坐标点不在多边形范围内，返回false\r\n      }\r\n    }\r\n\r\n    return true; // 所有坐标点都在多边形内部，返回true\r\n  } else if (shape1.type === 2 && shape2.type === 2) {\r\n    // 多边形和多边形的判断逻辑\r\n    const vertices1 = shape1.coor;\r\n    const vertices2 = shape2.coor;\r\n\r\n    for (let i = 0; i < vertices2.length; i++) {\r\n      const [x, y] = vertices2[i];\r\n      if (!isPointInPolygon(x, y, vertices1)) {\r\n        return false; // 多边形2的顶点不都在多边形1内部，不嵌套\r\n      }\r\n    }\r\n\r\n    return true; // 有坐标点都在多边形内部，返回true\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isPointInPolygon(x: number, y: number, vertices: any) {\r\n  let inside = false;\r\n  const n = vertices.length;\r\n\r\n  for (let i = 0, j = n - 1; i < n; j = i++) {\r\n    const xi = vertices[i][0];\r\n    const yi = vertices[i][1];\r\n    const xj = vertices[j][0];\r\n    const yj = vertices[j][1];\r\n\r\n    if (yi > y !== yj > y && x < ((xj - xi) * (y - yi)) / (yj - yi) + xi) {\r\n      inside = !inside;\r\n    }\r\n  }\r\n\r\n  return inside;\r\n}\r\n"]}